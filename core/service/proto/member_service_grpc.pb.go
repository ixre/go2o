// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.27.0
// source: member_service.proto

package proto

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MemberService_Register_FullMethodName                   = "/MemberService/Register"
	MemberService_CheckLogin_FullMethodName                 = "/MemberService/CheckLogin"
	MemberService_OAuthLogin_FullMethodName                 = "/MemberService/OAuthLogin"
	MemberService_GetOAuthInfo_FullMethodName               = "/MemberService/GetOAuthInfo"
	MemberService_VerifyTradePassword_FullMethodName        = "/MemberService/VerifyTradePassword"
	MemberService_GetLevels_FullMethodName                  = "/MemberService/GetLevels"
	MemberService_GetCertification_FullMethodName           = "/MemberService/GetCertification"
	MemberService_SubmitCertification_FullMethodName        = "/MemberService/SubmitCertification"
	MemberService_ReviewCertification_FullMethodName        = "/MemberService/ReviewCertification"
	MemberService_RejectCertification_FullMethodName        = "/MemberService/RejectCertification"
	MemberService_GetMemberLevel_FullMethodName             = "/MemberService/GetMemberLevel"
	MemberService_SaveMemberLevel_FullMethodName            = "/MemberService/SaveMemberLevel"
	MemberService_GetLevelBySign_FullMethodName             = "/MemberService/GetLevelBySign"
	MemberService_DeleteMemberLevel_FullMethodName          = "/MemberService/DeleteMemberLevel"
	MemberService_GetMember_FullMethodName                  = "/MemberService/GetMember"
	MemberService_FindMember_FullMethodName                 = "/MemberService/FindMember"
	MemberService_GetProfile_FullMethodName                 = "/MemberService/GetProfile"
	MemberService_SaveProfile_FullMethodName                = "/MemberService/SaveProfile"
	MemberService_GetInviter_FullMethodName                 = "/MemberService/GetInviter"
	MemberService_GetInviteCount_FullMethodName             = "/MemberService/GetInviteCount"
	MemberService_BlockOrShield_FullMethodName              = "/MemberService/BlockOrShield"
	MemberService_IsBlockOrShield_FullMethodName            = "/MemberService/IsBlockOrShield"
	MemberService_GetBankCards_FullMethodName               = "/MemberService/GetBankCards"
	MemberService_AddBankCard_FullMethodName                = "/MemberService/AddBankCard"
	MemberService_RemoveBankCard_FullMethodName             = "/MemberService/RemoveBankCard"
	MemberService_Active_FullMethodName                     = "/MemberService/Active"
	MemberService_Lock_FullMethodName                       = "/MemberService/Lock"
	MemberService_Unlock_FullMethodName                     = "/MemberService/Unlock"
	MemberService_GrantFlag_FullMethodName                  = "/MemberService/GrantFlag"
	MemberService_Complex_FullMethodName                    = "/MemberService/Complex"
	MemberService_SendCode_FullMethodName                   = "/MemberService/SendCode"
	MemberService_CompareCode_FullMethodName                = "/MemberService/compareCode"
	MemberService_ReceiptsCodes_FullMethodName              = "/MemberService/ReceiptsCodes"
	MemberService_SaveReceiptsCode_FullMethodName           = "/MemberService/SaveReceiptsCode"
	MemberService_SetPayPriority_FullMethodName             = "/MemberService/SetPayPriority"
	MemberService_CheckProfileComplete_FullMethodName       = "/MemberService/CheckProfileComplete"
	MemberService_MemberLevelInfo_FullMethodName            = "/MemberService/MemberLevelInfo"
	MemberService_ChangeLevel_FullMethodName                = "/MemberService/ChangeLevel"
	MemberService_ReviewLevelUpRequest_FullMethodName       = "/MemberService/ReviewLevelUpRequest"
	MemberService_ConfirmLevelUpRequest_FullMethodName      = "/MemberService/ConfirmLevelUpRequest"
	MemberService_ChangePhone_FullMethodName                = "/MemberService/ChangePhone"
	MemberService_ChangeUsername_FullMethodName             = "/MemberService/ChangeUsername"
	MemberService_ChangeNickname_FullMethodName             = "/MemberService/ChangeNickname"
	MemberService_ChangeProfilePhoto_FullMethodName         = "/MemberService/ChangeProfilePhoto"
	MemberService_ChangePassword_FullMethodName             = "/MemberService/ChangePassword"
	MemberService_ChangeTradePassword_FullMethodName        = "/MemberService/ChangeTradePassword"
	MemberService_CheckProfileCompleted_FullMethodName      = "/MemberService/CheckProfileCompleted"
	MemberService_SetInviter_FullMethodName                 = "/MemberService/SetInviter"
	MemberService_Premium_FullMethodName                    = "/MemberService/Premium"
	MemberService_GetToken_FullMethodName                   = "/MemberService/GetToken"
	MemberService_CheckToken_FullMethodName                 = "/MemberService/CheckToken"
	MemberService_RemoveToken_FullMethodName                = "/MemberService/RemoveToken"
	MemberService_GetAddressList_FullMethodName             = "/MemberService/GetAddressList"
	MemberService_SaveAddress_FullMethodName                = "/MemberService/SaveAddress"
	MemberService_GetAddress_FullMethodName                 = "/MemberService/GetAddress"
	MemberService_DeleteAddress_FullMethodName              = "/MemberService/DeleteAddress"
	MemberService_GetAccount_FullMethodName                 = "/MemberService/GetAccount"
	MemberService_IsInvitation_FullMethodName               = "/MemberService/IsInvitation"
	MemberService_InviterArray_FullMethodName               = "/MemberService/InviterArray"
	MemberService_InviteMembersQuantity_FullMethodName      = "/MemberService/InviteMembersQuantity"
	MemberService_QueryInviteQuantity_FullMethodName        = "/MemberService/QueryInviteQuantity"
	MemberService_QueryInviteArray_FullMethodName           = "/MemberService/QueryInviteArray"
	MemberService_GetPagingInvitationMembers_FullMethodName = "/MemberService/GetPagingInvitationMembers"
	MemberService_AccountCharge_FullMethodName              = "/MemberService/AccountCharge"
	MemberService_AccountCarryTo_FullMethodName             = "/MemberService/AccountCarryTo"
	MemberService_AccountConsume_FullMethodName             = "/MemberService/AccountConsume"
	MemberService_PrefreezeConsume_FullMethodName           = "/MemberService/PrefreezeConsume"
	MemberService_AccountDiscount_FullMethodName            = "/MemberService/AccountDiscount"
	MemberService_Freeze_FullMethodName                     = "/MemberService/Freeze"
	MemberService_Unfreeze_FullMethodName                   = "/MemberService/Unfreeze"
	MemberService_AccountRefund_FullMethodName              = "/MemberService/AccountRefund"
	MemberService_AccountAdjust_FullMethodName              = "/MemberService/AccountAdjust"
	MemberService_AccountTransfer_FullMethodName            = "/MemberService/AccountTransfer"
	MemberService_RequestWithdrawal_FullMethodName          = "/MemberService/RequestWithdrawal"
	MemberService_ReviewWithdrawal_FullMethodName           = "/MemberService/ReviewWithdrawal"
	MemberService_CompleteTransaction_FullMethodName        = "/MemberService/CompleteTransaction"
	MemberService_QueryWithdrawalLog_FullMethodName         = "/MemberService/QueryWithdrawalLog"
	MemberService_SubmitRechargePaymentOrder_FullMethodName = "/MemberService/SubmitRechargePaymentOrder"
	MemberService_BindOAuthApp_FullMethodName               = "/MemberService/BindOAuthApp"
	MemberService_UnbindOAuthApp_FullMethodName             = "/MemberService/UnbindOAuthApp"
	MemberService_GetOAuthBindInfo_FullMethodName           = "/MemberService/GetOAuthBindInfo"
	MemberService_B4EAuth_FullMethodName                    = "/MemberService/B4EAuth"
	MemberService_GetWalletTxLog_FullMethodName             = "/MemberService/GetWalletTxLog"
	MemberService_RemoveFavorite_FullMethodName             = "/MemberService/RemoveFavorite"
	MemberService_Favorite_FullMethodName                   = "/MemberService/Favorite"
	MemberService_IsFavored_FullMethodName                  = "/MemberService/IsFavored"
	MemberService_QueryCoupons_FullMethodName               = "/MemberService/QueryCoupons"
)

// MemberServiceClient is the client API for MemberService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// 会员服务
type MemberServiceClient interface {
	// *
	// 注册会员
	// @param user 登陆用户名
	// @param pwd 登陆密码,md5运算后的字符串
	// @param flag 用户自定义标志
	// @param phone 手机号码
	// @param email 邮箱
	// @param avatar 头像
	// @param extend 扩展数据
	// @return 注册结果，返回user_code
	Register(ctx context.Context, in *RegisterMemberRequest, opts ...grpc.CallOption) (*RegisterResponse, error)
	// 登录，返回结果(Result)和会员编号(Id);
	// Result值为：-1:会员不存在; -2:账号密码不正确; -3:账号被停用
	CheckLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// 第三方快捷登录
	OAuthLogin(ctx context.Context, in *OAuthLoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// 获取第三方登录信息/检测是否已经绑定应用
	GetOAuthInfo(ctx context.Context, in *OAuthUserInfoRequest, opts ...grpc.CallOption) (*OAuthUserInfoResponse, error)
	// * 验证交易密码
	VerifyTradePassword(ctx context.Context, in *VerifyPasswordRequest, opts ...grpc.CallOption) (*Result, error)
	// * 等级列表
	GetLevels(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SMemberLevelListResponse, error)
	// 获取实名信息,memberId
	GetCertification(ctx context.Context, in *MemberIdRequest, opts ...grpc.CallOption) (*SCertificationInfo, error)
	// * 提交实名信息
	SubmitCertification(ctx context.Context, in *SubmitCertificationRequest, opts ...grpc.CallOption) (*TxResult, error)
	// * 审核实名认证,若重复审核将返回错误 *
	ReviewCertification(ctx context.Context, in *ReviewCertificationRequest, opts ...grpc.CallOption) (*TxResult, error)
	// * 驳回实名认证,用于认证通过后退回，要求重新认证
	RejectCertification(ctx context.Context, in *RejectCertificationRequest, opts ...grpc.CallOption) (*TxResult, error)
	// * 获取会员等级信息,id
	GetMemberLevel(ctx context.Context, in *Int32, opts ...grpc.CallOption) (*SMemberLevel, error)
	// * 保存等级
	SaveMemberLevel(ctx context.Context, in *SMemberLevel, opts ...grpc.CallOption) (*Result, error)
	// 根据SIGN获取等级,sign
	GetLevelBySign(ctx context.Context, in *String, opts ...grpc.CallOption) (*SMemberLevel, error)
	// 删除会员等级
	DeleteMemberLevel(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*Result, error)
	// 根据会员编号获取会员信息
	GetMember(ctx context.Context, in *MemberIdRequest, opts ...grpc.CallOption) (*SMember, error)
	// * 查找交换会员编号
	FindMember(ctx context.Context, in *FindMemberRequest, opts ...grpc.CallOption) (*FindMemberResponse, error)
	// 根据会员编号获取会员资料
	GetProfile(ctx context.Context, in *MemberIdRequest, opts ...grpc.CallOption) (*SProfile, error)
	// 保存资料
	SaveProfile(ctx context.Context, in *SProfile, opts ...grpc.CallOption) (*Result, error)
	// 获取会员邀请人信息
	GetInviter(ctx context.Context, in *MemberIdRequest, opts ...grpc.CallOption) (*MemberInviterResponse, error)
	// 获取会员邀请数量
	GetInviteCount(ctx context.Context, in *MemberIdRequest, opts ...grpc.CallOption) (*MemberInviteCountResponse, error)
	// 会员屏蔽或拉黑操作及取消屏蔽和取消拉黑操作
	BlockOrShield(ctx context.Context, in *MemberBlockShieldRequest, opts ...grpc.CallOption) (*TxResult, error)
	// 是否屏蔽或拉黑
	IsBlockOrShield(ctx context.Context, in *MembersIdRequest, opts ...grpc.CallOption) (*MemberBlockShieldResponse, error)
	// 获取会员绑定银行卡信息
	GetBankCards(ctx context.Context, in *MemberIdRequest, opts ...grpc.CallOption) (*BankCardListResponse, error)
	// 添加银行卡
	AddBankCard(ctx context.Context, in *BankCardAddRequest, opts ...grpc.CallOption) (*Result, error)
	// 移除绑定的银行卡
	RemoveBankCard(ctx context.Context, in *BankCardRequest, opts ...grpc.CallOption) (*Result, error)
	// * 激活会员,memberId
	Active(ctx context.Context, in *MemberIdRequest, opts ...grpc.CallOption) (*TxResult, error)
	// * 锁定,minutes锁定分钟数,默认:-1永久锁定
	Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*TxResult, error)
	// * 解锁会员
	Unlock(ctx context.Context, in *MemberIdRequest, opts ...grpc.CallOption) (*TxResult, error)
	// * 标志赋值, 如果flag小于零, 则异或运算
	GrantFlag(ctx context.Context, in *GrantFlagRequest, opts ...grpc.CallOption) (*TxResult, error)
	// * 获取会员汇总信息,memberId
	Complex(ctx context.Context, in *MemberIdRequest, opts ...grpc.CallOption) (*SComplexMember, error)
	// * 发送会员验证码消息, 并返回验证码, 验证码通过data.code获取
	SendCode(ctx context.Context, in *SendCodeRequest, opts ...grpc.CallOption) (*SendCodeResponse, error)
	// * 比较验证码是否正确
	CompareCode(ctx context.Context, in *CompareCodeRequest, opts ...grpc.CallOption) (*TxResult, error)
	// * 获取收款码
	ReceiptsCodes(ctx context.Context, in *MemberIdRequest, opts ...grpc.CallOption) (*SReceiptsCodeListResponse, error)
	// * 保存收款码
	SaveReceiptsCode(ctx context.Context, in *ReceiptsCodeSaveRequest, opts ...grpc.CallOption) (*Result, error)
	// 设置余额优先支付
	SetPayPriority(ctx context.Context, in *PayPriorityRequest, opts ...grpc.CallOption) (*Result, error)
	// 检查资料是否完成
	CheckProfileComplete(ctx context.Context, in *MemberIdRequest, opts ...grpc.CallOption) (*Result, error)
	// * 获取会员等级信息
	MemberLevelInfo(ctx context.Context, in *MemberIdRequest, opts ...grpc.CallOption) (*SMemberLevelInfo, error)
	// 更改会员等级
	ChangeLevel(ctx context.Context, in *ChangeLevelRequest, opts ...grpc.CallOption) (*TxResult, error)
	// 审核升级申请
	ReviewLevelUpRequest(ctx context.Context, in *LevelUpReviewRequest, opts ...grpc.CallOption) (*Result, error)
	// 确认升级申请
	ConfirmLevelUpRequest(ctx context.Context, in *LevelUpConfirmRequest, opts ...grpc.CallOption) (*Result, error)
	// 更改手机号码，不验证手机格式
	ChangePhone(ctx context.Context, in *ChangePhoneRequest, opts ...grpc.CallOption) (*TxResult, error)
	// 更改用户名
	ChangeUsername(ctx context.Context, in *ChangeUsernameRequest, opts ...grpc.CallOption) (*TxResult, error)
	// 更改昵称
	ChangeNickname(ctx context.Context, in *ChangeNicknameRequest, opts ...grpc.CallOption) (*TxResult, error)
	// 上传会员头像
	ChangeProfilePhoto(ctx context.Context, in *ChangeProfilePhotoRequest, opts ...grpc.CallOption) (*TxResult, error)
	// * 更改密码
	ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*TxResult, error)
	// * 更改交易密码
	ChangeTradePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*TxResult, error)
	// 检查资料是否完善
	CheckProfileCompleted(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*Bool, error)
	// * 设置或更改邀请人
	SetInviter(ctx context.Context, in *SetInviterRequest, opts ...grpc.CallOption) (*TxResult, error)
	// 升级为高级会员
	Premium(ctx context.Context, in *PremiumRequest, opts ...grpc.CallOption) (*Result, error)
	// 获取会员的会员Token,reset表示是否重置token
	GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*String, error)
	// 检查会员的会话Token是否正确，如正确返回: 1
	CheckToken(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*Bool, error)
	// 移除会员的Token,memberId
	RemoveToken(ctx context.Context, in *MemberIdRequest, opts ...grpc.CallOption) (*Empty, error)
	// 获取会员的收货地址,memberId
	GetAddressList(ctx context.Context, in *MemberIdRequest, opts ...grpc.CallOption) (*AddressListResponse, error)
	// 保存会员的收货地址
	SaveAddress(ctx context.Context, in *SaveAddressRequest, opts ...grpc.CallOption) (*SaveAddressResponse, error)
	// 获取地址，如果addrId为0，则返回默认地址
	GetAddress(ctx context.Context, in *GetAddressRequest, opts ...grpc.CallOption) (*SAddress, error)
	// 删除配送地址
	DeleteAddress(ctx context.Context, in *AddressIdRequest, opts ...grpc.CallOption) (*Result, error)
	// 获取会员账户信息,memberId
	GetAccount(ctx context.Context, in *MemberIdRequest, opts ...grpc.CallOption) (*SAccount, error)
	// 判断会员是否由指定会员邀请推荐的
	IsInvitation(ctx context.Context, in *IsInvitationRequest, opts ...grpc.CallOption) (*Bool, error)
	// 获取自己的邀请人会员编号数组
	InviterArray(ctx context.Context, in *DepthRequest, opts ...grpc.CallOption) (*InviterIdListResponse, error)
	// 获取邀请会员的数量
	InviteMembersQuantity(ctx context.Context, in *DepthRequest, opts ...grpc.CallOption) (*Int32, error)
	// 按条件获取荐指定等级会员的数量
	QueryInviteQuantity(ctx context.Context, in *InviteQuantityRequest, opts ...grpc.CallOption) (*Int64, error)
	// 按条件获取荐指定等级会员的列表
	QueryInviteArray(ctx context.Context, in *InviteQuantityRequest, opts ...grpc.CallOption) (*MemberIdListResponse, error)
	// 获取我邀请的会员及会员邀请的人数
	GetPagingInvitationMembers(ctx context.Context, in *MemberInvitationPagingRequest, opts ...grpc.CallOption) (*MemberInvitationPagingResponse, error)
	// 账户充值,amount精确到分
	AccountCharge(ctx context.Context, in *AccountChangeRequest, opts ...grpc.CallOption) (*TxResult, error)
	// 账户入账
	AccountCarryTo(ctx context.Context, in *AccountCarryRequest, opts ...grpc.CallOption) (*TxResult, error)
	// 账户消耗,amount精确到分
	AccountConsume(ctx context.Context, in *AccountChangeRequest, opts ...grpc.CallOption) (*TxResult, error)
	// 账户预扣消耗(预扣转消费),amount精确到分
	PrefreezeConsume(ctx context.Context, in *UserPrefreezeConsumeRequest, opts ...grpc.CallOption) (*TxResult, error)
	// 账户抵扣,amount精确到分
	AccountDiscount(ctx context.Context, in *AccountChangeRequest, opts ...grpc.CallOption) (*TxResult, error)
	// * 账户冻结
	Freeze(ctx context.Context, in *AccountFreezeRequest, opts ...grpc.CallOption) (*TxResult, error)
	// * 账户解冻
	Unfreeze(ctx context.Context, in *AccountUnfreezeRequest, opts ...grpc.CallOption) (*TxResult, error)
	// 账户退款,amount精确到分
	AccountRefund(ctx context.Context, in *AccountChangeRequest, opts ...grpc.CallOption) (*TxResult, error)
	// 账户人工调整
	AccountAdjust(ctx context.Context, in *AccountAdjustRequest, opts ...grpc.CallOption) (*TxResult, error)
	// 转账转账
	AccountTransfer(ctx context.Context, in *AccountTransferRequest, opts ...grpc.CallOption) (*TxResult, error)
	// 提现并返回提现编号,交易号以及错误信息
	RequestWithdrawal(ctx context.Context, in *UserWithdrawRequest, opts ...grpc.CallOption) (*TxResult, error)
	// 确认提现
	ReviewWithdrawal(ctx context.Context, in *ReviewUserWithdrawalRequest, opts ...grpc.CallOption) (*TxResult, error)
	// 完成交易(如：提现到账)
	CompleteTransaction(ctx context.Context, in *FinishUserTransactionRequest, opts ...grpc.CallOption) (*TxResult, error)
	// 查询提现记录
	QueryWithdrawalLog(ctx context.Context, in *WithdrawalLogRequest, opts ...grpc.CallOption) (*WithdrawalLogResponse, error)
	// 提交充值支付单
	SubmitRechargePaymentOrder(ctx context.Context, in *SubmitRechargePaymentOrderRequest, opts ...grpc.CallOption) (*RechargePaymentOrderResponse, error)
	// 绑定第三方应用
	BindOAuthApp(ctx context.Context, in *SMemberOAuthAccount, opts ...grpc.CallOption) (*Result, error)
	// 解除第三方应用绑定
	UnbindOAuthApp(ctx context.Context, in *MemberOAuthRequest, opts ...grpc.CallOption) (*Result, error)
	// 获取第三方应用绑定信息
	GetOAuthBindInfo(ctx context.Context, in *MemberOAuthRequest, opts ...grpc.CallOption) (*SMemberOAuthAccount, error)
	// !银行四要素认证
	B4EAuth(ctx context.Context, in *B4EAuthRequest, opts ...grpc.CallOption) (*Result, error)
	// 获取钱包流水记录
	GetWalletTxLog(ctx context.Context, in *UserWalletTxId, opts ...grpc.CallOption) (*UserWalletTxResponse, error)
	// 取消收藏
	RemoveFavorite(ctx context.Context, in *FavoriteRequest, opts ...grpc.CallOption) (*Result, error)
	// 收藏商品
	Favorite(ctx context.Context, in *FavoriteRequest, opts ...grpc.CallOption) (*Result, error)
	// 是否已收藏
	IsFavored(ctx context.Context, in *FavoriteRequest, opts ...grpc.CallOption) (*Bool, error)
	// 查询优惠券
	QueryCoupons(ctx context.Context, in *MemberCouponPagingRequest, opts ...grpc.CallOption) (*MemberCouponListResponse, error)
}

type memberServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMemberServiceClient(cc grpc.ClientConnInterface) MemberServiceClient {
	return &memberServiceClient{cc}
}

func (c *memberServiceClient) Register(ctx context.Context, in *RegisterMemberRequest, opts ...grpc.CallOption) (*RegisterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RegisterResponse)
	err := c.cc.Invoke(ctx, MemberService_Register_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) CheckLogin(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, MemberService_CheckLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) OAuthLogin(ctx context.Context, in *OAuthLoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, MemberService_OAuthLogin_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetOAuthInfo(ctx context.Context, in *OAuthUserInfoRequest, opts ...grpc.CallOption) (*OAuthUserInfoResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(OAuthUserInfoResponse)
	err := c.cc.Invoke(ctx, MemberService_GetOAuthInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) VerifyTradePassword(ctx context.Context, in *VerifyPasswordRequest, opts ...grpc.CallOption) (*Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Result)
	err := c.cc.Invoke(ctx, MemberService_VerifyTradePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetLevels(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SMemberLevelListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SMemberLevelListResponse)
	err := c.cc.Invoke(ctx, MemberService_GetLevels_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetCertification(ctx context.Context, in *MemberIdRequest, opts ...grpc.CallOption) (*SCertificationInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SCertificationInfo)
	err := c.cc.Invoke(ctx, MemberService_GetCertification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) SubmitCertification(ctx context.Context, in *SubmitCertificationRequest, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, MemberService_SubmitCertification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) ReviewCertification(ctx context.Context, in *ReviewCertificationRequest, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, MemberService_ReviewCertification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) RejectCertification(ctx context.Context, in *RejectCertificationRequest, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, MemberService_RejectCertification_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetMemberLevel(ctx context.Context, in *Int32, opts ...grpc.CallOption) (*SMemberLevel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SMemberLevel)
	err := c.cc.Invoke(ctx, MemberService_GetMemberLevel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) SaveMemberLevel(ctx context.Context, in *SMemberLevel, opts ...grpc.CallOption) (*Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Result)
	err := c.cc.Invoke(ctx, MemberService_SaveMemberLevel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetLevelBySign(ctx context.Context, in *String, opts ...grpc.CallOption) (*SMemberLevel, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SMemberLevel)
	err := c.cc.Invoke(ctx, MemberService_GetLevelBySign_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) DeleteMemberLevel(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Result)
	err := c.cc.Invoke(ctx, MemberService_DeleteMemberLevel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetMember(ctx context.Context, in *MemberIdRequest, opts ...grpc.CallOption) (*SMember, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SMember)
	err := c.cc.Invoke(ctx, MemberService_GetMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) FindMember(ctx context.Context, in *FindMemberRequest, opts ...grpc.CallOption) (*FindMemberResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(FindMemberResponse)
	err := c.cc.Invoke(ctx, MemberService_FindMember_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetProfile(ctx context.Context, in *MemberIdRequest, opts ...grpc.CallOption) (*SProfile, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SProfile)
	err := c.cc.Invoke(ctx, MemberService_GetProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) SaveProfile(ctx context.Context, in *SProfile, opts ...grpc.CallOption) (*Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Result)
	err := c.cc.Invoke(ctx, MemberService_SaveProfile_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetInviter(ctx context.Context, in *MemberIdRequest, opts ...grpc.CallOption) (*MemberInviterResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MemberInviterResponse)
	err := c.cc.Invoke(ctx, MemberService_GetInviter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetInviteCount(ctx context.Context, in *MemberIdRequest, opts ...grpc.CallOption) (*MemberInviteCountResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MemberInviteCountResponse)
	err := c.cc.Invoke(ctx, MemberService_GetInviteCount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) BlockOrShield(ctx context.Context, in *MemberBlockShieldRequest, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, MemberService_BlockOrShield_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) IsBlockOrShield(ctx context.Context, in *MembersIdRequest, opts ...grpc.CallOption) (*MemberBlockShieldResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MemberBlockShieldResponse)
	err := c.cc.Invoke(ctx, MemberService_IsBlockOrShield_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetBankCards(ctx context.Context, in *MemberIdRequest, opts ...grpc.CallOption) (*BankCardListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(BankCardListResponse)
	err := c.cc.Invoke(ctx, MemberService_GetBankCards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) AddBankCard(ctx context.Context, in *BankCardAddRequest, opts ...grpc.CallOption) (*Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Result)
	err := c.cc.Invoke(ctx, MemberService_AddBankCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) RemoveBankCard(ctx context.Context, in *BankCardRequest, opts ...grpc.CallOption) (*Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Result)
	err := c.cc.Invoke(ctx, MemberService_RemoveBankCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) Active(ctx context.Context, in *MemberIdRequest, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, MemberService_Active_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) Lock(ctx context.Context, in *LockRequest, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, MemberService_Lock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) Unlock(ctx context.Context, in *MemberIdRequest, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, MemberService_Unlock_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GrantFlag(ctx context.Context, in *GrantFlagRequest, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, MemberService_GrantFlag_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) Complex(ctx context.Context, in *MemberIdRequest, opts ...grpc.CallOption) (*SComplexMember, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SComplexMember)
	err := c.cc.Invoke(ctx, MemberService_Complex_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) SendCode(ctx context.Context, in *SendCodeRequest, opts ...grpc.CallOption) (*SendCodeResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SendCodeResponse)
	err := c.cc.Invoke(ctx, MemberService_SendCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) CompareCode(ctx context.Context, in *CompareCodeRequest, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, MemberService_CompareCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) ReceiptsCodes(ctx context.Context, in *MemberIdRequest, opts ...grpc.CallOption) (*SReceiptsCodeListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SReceiptsCodeListResponse)
	err := c.cc.Invoke(ctx, MemberService_ReceiptsCodes_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) SaveReceiptsCode(ctx context.Context, in *ReceiptsCodeSaveRequest, opts ...grpc.CallOption) (*Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Result)
	err := c.cc.Invoke(ctx, MemberService_SaveReceiptsCode_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) SetPayPriority(ctx context.Context, in *PayPriorityRequest, opts ...grpc.CallOption) (*Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Result)
	err := c.cc.Invoke(ctx, MemberService_SetPayPriority_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) CheckProfileComplete(ctx context.Context, in *MemberIdRequest, opts ...grpc.CallOption) (*Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Result)
	err := c.cc.Invoke(ctx, MemberService_CheckProfileComplete_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) MemberLevelInfo(ctx context.Context, in *MemberIdRequest, opts ...grpc.CallOption) (*SMemberLevelInfo, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SMemberLevelInfo)
	err := c.cc.Invoke(ctx, MemberService_MemberLevelInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) ChangeLevel(ctx context.Context, in *ChangeLevelRequest, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, MemberService_ChangeLevel_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) ReviewLevelUpRequest(ctx context.Context, in *LevelUpReviewRequest, opts ...grpc.CallOption) (*Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Result)
	err := c.cc.Invoke(ctx, MemberService_ReviewLevelUpRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) ConfirmLevelUpRequest(ctx context.Context, in *LevelUpConfirmRequest, opts ...grpc.CallOption) (*Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Result)
	err := c.cc.Invoke(ctx, MemberService_ConfirmLevelUpRequest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) ChangePhone(ctx context.Context, in *ChangePhoneRequest, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, MemberService_ChangePhone_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) ChangeUsername(ctx context.Context, in *ChangeUsernameRequest, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, MemberService_ChangeUsername_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) ChangeNickname(ctx context.Context, in *ChangeNicknameRequest, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, MemberService_ChangeNickname_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) ChangeProfilePhoto(ctx context.Context, in *ChangeProfilePhotoRequest, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, MemberService_ChangeProfilePhoto_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) ChangePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, MemberService_ChangePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) ChangeTradePassword(ctx context.Context, in *ChangePasswordRequest, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, MemberService_ChangeTradePassword_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) CheckProfileCompleted(ctx context.Context, in *Int64, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, MemberService_CheckProfileCompleted_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) SetInviter(ctx context.Context, in *SetInviterRequest, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, MemberService_SetInviter_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) Premium(ctx context.Context, in *PremiumRequest, opts ...grpc.CallOption) (*Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Result)
	err := c.cc.Invoke(ctx, MemberService_Premium_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetToken(ctx context.Context, in *GetTokenRequest, opts ...grpc.CallOption) (*String, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(String)
	err := c.cc.Invoke(ctx, MemberService_GetToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) CheckToken(ctx context.Context, in *CheckTokenRequest, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, MemberService_CheckToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) RemoveToken(ctx context.Context, in *MemberIdRequest, opts ...grpc.CallOption) (*Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Empty)
	err := c.cc.Invoke(ctx, MemberService_RemoveToken_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetAddressList(ctx context.Context, in *MemberIdRequest, opts ...grpc.CallOption) (*AddressListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddressListResponse)
	err := c.cc.Invoke(ctx, MemberService_GetAddressList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) SaveAddress(ctx context.Context, in *SaveAddressRequest, opts ...grpc.CallOption) (*SaveAddressResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SaveAddressResponse)
	err := c.cc.Invoke(ctx, MemberService_SaveAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetAddress(ctx context.Context, in *GetAddressRequest, opts ...grpc.CallOption) (*SAddress, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SAddress)
	err := c.cc.Invoke(ctx, MemberService_GetAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) DeleteAddress(ctx context.Context, in *AddressIdRequest, opts ...grpc.CallOption) (*Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Result)
	err := c.cc.Invoke(ctx, MemberService_DeleteAddress_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetAccount(ctx context.Context, in *MemberIdRequest, opts ...grpc.CallOption) (*SAccount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SAccount)
	err := c.cc.Invoke(ctx, MemberService_GetAccount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) IsInvitation(ctx context.Context, in *IsInvitationRequest, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, MemberService_IsInvitation_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) InviterArray(ctx context.Context, in *DepthRequest, opts ...grpc.CallOption) (*InviterIdListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InviterIdListResponse)
	err := c.cc.Invoke(ctx, MemberService_InviterArray_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) InviteMembersQuantity(ctx context.Context, in *DepthRequest, opts ...grpc.CallOption) (*Int32, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Int32)
	err := c.cc.Invoke(ctx, MemberService_InviteMembersQuantity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) QueryInviteQuantity(ctx context.Context, in *InviteQuantityRequest, opts ...grpc.CallOption) (*Int64, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Int64)
	err := c.cc.Invoke(ctx, MemberService_QueryInviteQuantity_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) QueryInviteArray(ctx context.Context, in *InviteQuantityRequest, opts ...grpc.CallOption) (*MemberIdListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MemberIdListResponse)
	err := c.cc.Invoke(ctx, MemberService_QueryInviteArray_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetPagingInvitationMembers(ctx context.Context, in *MemberInvitationPagingRequest, opts ...grpc.CallOption) (*MemberInvitationPagingResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MemberInvitationPagingResponse)
	err := c.cc.Invoke(ctx, MemberService_GetPagingInvitationMembers_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) AccountCharge(ctx context.Context, in *AccountChangeRequest, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, MemberService_AccountCharge_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) AccountCarryTo(ctx context.Context, in *AccountCarryRequest, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, MemberService_AccountCarryTo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) AccountConsume(ctx context.Context, in *AccountChangeRequest, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, MemberService_AccountConsume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) PrefreezeConsume(ctx context.Context, in *UserPrefreezeConsumeRequest, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, MemberService_PrefreezeConsume_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) AccountDiscount(ctx context.Context, in *AccountChangeRequest, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, MemberService_AccountDiscount_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) Freeze(ctx context.Context, in *AccountFreezeRequest, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, MemberService_Freeze_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) Unfreeze(ctx context.Context, in *AccountUnfreezeRequest, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, MemberService_Unfreeze_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) AccountRefund(ctx context.Context, in *AccountChangeRequest, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, MemberService_AccountRefund_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) AccountAdjust(ctx context.Context, in *AccountAdjustRequest, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, MemberService_AccountAdjust_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) AccountTransfer(ctx context.Context, in *AccountTransferRequest, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, MemberService_AccountTransfer_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) RequestWithdrawal(ctx context.Context, in *UserWithdrawRequest, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, MemberService_RequestWithdrawal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) ReviewWithdrawal(ctx context.Context, in *ReviewUserWithdrawalRequest, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, MemberService_ReviewWithdrawal_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) CompleteTransaction(ctx context.Context, in *FinishUserTransactionRequest, opts ...grpc.CallOption) (*TxResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TxResult)
	err := c.cc.Invoke(ctx, MemberService_CompleteTransaction_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) QueryWithdrawalLog(ctx context.Context, in *WithdrawalLogRequest, opts ...grpc.CallOption) (*WithdrawalLogResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(WithdrawalLogResponse)
	err := c.cc.Invoke(ctx, MemberService_QueryWithdrawalLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) SubmitRechargePaymentOrder(ctx context.Context, in *SubmitRechargePaymentOrderRequest, opts ...grpc.CallOption) (*RechargePaymentOrderResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(RechargePaymentOrderResponse)
	err := c.cc.Invoke(ctx, MemberService_SubmitRechargePaymentOrder_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) BindOAuthApp(ctx context.Context, in *SMemberOAuthAccount, opts ...grpc.CallOption) (*Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Result)
	err := c.cc.Invoke(ctx, MemberService_BindOAuthApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) UnbindOAuthApp(ctx context.Context, in *MemberOAuthRequest, opts ...grpc.CallOption) (*Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Result)
	err := c.cc.Invoke(ctx, MemberService_UnbindOAuthApp_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetOAuthBindInfo(ctx context.Context, in *MemberOAuthRequest, opts ...grpc.CallOption) (*SMemberOAuthAccount, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SMemberOAuthAccount)
	err := c.cc.Invoke(ctx, MemberService_GetOAuthBindInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) B4EAuth(ctx context.Context, in *B4EAuthRequest, opts ...grpc.CallOption) (*Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Result)
	err := c.cc.Invoke(ctx, MemberService_B4EAuth_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) GetWalletTxLog(ctx context.Context, in *UserWalletTxId, opts ...grpc.CallOption) (*UserWalletTxResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserWalletTxResponse)
	err := c.cc.Invoke(ctx, MemberService_GetWalletTxLog_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) RemoveFavorite(ctx context.Context, in *FavoriteRequest, opts ...grpc.CallOption) (*Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Result)
	err := c.cc.Invoke(ctx, MemberService_RemoveFavorite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) Favorite(ctx context.Context, in *FavoriteRequest, opts ...grpc.CallOption) (*Result, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Result)
	err := c.cc.Invoke(ctx, MemberService_Favorite_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) IsFavored(ctx context.Context, in *FavoriteRequest, opts ...grpc.CallOption) (*Bool, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(Bool)
	err := c.cc.Invoke(ctx, MemberService_IsFavored_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *memberServiceClient) QueryCoupons(ctx context.Context, in *MemberCouponPagingRequest, opts ...grpc.CallOption) (*MemberCouponListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(MemberCouponListResponse)
	err := c.cc.Invoke(ctx, MemberService_QueryCoupons_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MemberServiceServer is the server API for MemberService service.
// All implementations must embed UnimplementedMemberServiceServer
// for forward compatibility.
//
// 会员服务
type MemberServiceServer interface {
	// *
	// 注册会员
	// @param user 登陆用户名
	// @param pwd 登陆密码,md5运算后的字符串
	// @param flag 用户自定义标志
	// @param phone 手机号码
	// @param email 邮箱
	// @param avatar 头像
	// @param extend 扩展数据
	// @return 注册结果，返回user_code
	Register(context.Context, *RegisterMemberRequest) (*RegisterResponse, error)
	// 登录，返回结果(Result)和会员编号(Id);
	// Result值为：-1:会员不存在; -2:账号密码不正确; -3:账号被停用
	CheckLogin(context.Context, *LoginRequest) (*LoginResponse, error)
	// 第三方快捷登录
	OAuthLogin(context.Context, *OAuthLoginRequest) (*LoginResponse, error)
	// 获取第三方登录信息/检测是否已经绑定应用
	GetOAuthInfo(context.Context, *OAuthUserInfoRequest) (*OAuthUserInfoResponse, error)
	// * 验证交易密码
	VerifyTradePassword(context.Context, *VerifyPasswordRequest) (*Result, error)
	// * 等级列表
	GetLevels(context.Context, *Empty) (*SMemberLevelListResponse, error)
	// 获取实名信息,memberId
	GetCertification(context.Context, *MemberIdRequest) (*SCertificationInfo, error)
	// * 提交实名信息
	SubmitCertification(context.Context, *SubmitCertificationRequest) (*TxResult, error)
	// * 审核实名认证,若重复审核将返回错误 *
	ReviewCertification(context.Context, *ReviewCertificationRequest) (*TxResult, error)
	// * 驳回实名认证,用于认证通过后退回，要求重新认证
	RejectCertification(context.Context, *RejectCertificationRequest) (*TxResult, error)
	// * 获取会员等级信息,id
	GetMemberLevel(context.Context, *Int32) (*SMemberLevel, error)
	// * 保存等级
	SaveMemberLevel(context.Context, *SMemberLevel) (*Result, error)
	// 根据SIGN获取等级,sign
	GetLevelBySign(context.Context, *String) (*SMemberLevel, error)
	// 删除会员等级
	DeleteMemberLevel(context.Context, *Int64) (*Result, error)
	// 根据会员编号获取会员信息
	GetMember(context.Context, *MemberIdRequest) (*SMember, error)
	// * 查找交换会员编号
	FindMember(context.Context, *FindMemberRequest) (*FindMemberResponse, error)
	// 根据会员编号获取会员资料
	GetProfile(context.Context, *MemberIdRequest) (*SProfile, error)
	// 保存资料
	SaveProfile(context.Context, *SProfile) (*Result, error)
	// 获取会员邀请人信息
	GetInviter(context.Context, *MemberIdRequest) (*MemberInviterResponse, error)
	// 获取会员邀请数量
	GetInviteCount(context.Context, *MemberIdRequest) (*MemberInviteCountResponse, error)
	// 会员屏蔽或拉黑操作及取消屏蔽和取消拉黑操作
	BlockOrShield(context.Context, *MemberBlockShieldRequest) (*TxResult, error)
	// 是否屏蔽或拉黑
	IsBlockOrShield(context.Context, *MembersIdRequest) (*MemberBlockShieldResponse, error)
	// 获取会员绑定银行卡信息
	GetBankCards(context.Context, *MemberIdRequest) (*BankCardListResponse, error)
	// 添加银行卡
	AddBankCard(context.Context, *BankCardAddRequest) (*Result, error)
	// 移除绑定的银行卡
	RemoveBankCard(context.Context, *BankCardRequest) (*Result, error)
	// * 激活会员,memberId
	Active(context.Context, *MemberIdRequest) (*TxResult, error)
	// * 锁定,minutes锁定分钟数,默认:-1永久锁定
	Lock(context.Context, *LockRequest) (*TxResult, error)
	// * 解锁会员
	Unlock(context.Context, *MemberIdRequest) (*TxResult, error)
	// * 标志赋值, 如果flag小于零, 则异或运算
	GrantFlag(context.Context, *GrantFlagRequest) (*TxResult, error)
	// * 获取会员汇总信息,memberId
	Complex(context.Context, *MemberIdRequest) (*SComplexMember, error)
	// * 发送会员验证码消息, 并返回验证码, 验证码通过data.code获取
	SendCode(context.Context, *SendCodeRequest) (*SendCodeResponse, error)
	// * 比较验证码是否正确
	CompareCode(context.Context, *CompareCodeRequest) (*TxResult, error)
	// * 获取收款码
	ReceiptsCodes(context.Context, *MemberIdRequest) (*SReceiptsCodeListResponse, error)
	// * 保存收款码
	SaveReceiptsCode(context.Context, *ReceiptsCodeSaveRequest) (*Result, error)
	// 设置余额优先支付
	SetPayPriority(context.Context, *PayPriorityRequest) (*Result, error)
	// 检查资料是否完成
	CheckProfileComplete(context.Context, *MemberIdRequest) (*Result, error)
	// * 获取会员等级信息
	MemberLevelInfo(context.Context, *MemberIdRequest) (*SMemberLevelInfo, error)
	// 更改会员等级
	ChangeLevel(context.Context, *ChangeLevelRequest) (*TxResult, error)
	// 审核升级申请
	ReviewLevelUpRequest(context.Context, *LevelUpReviewRequest) (*Result, error)
	// 确认升级申请
	ConfirmLevelUpRequest(context.Context, *LevelUpConfirmRequest) (*Result, error)
	// 更改手机号码，不验证手机格式
	ChangePhone(context.Context, *ChangePhoneRequest) (*TxResult, error)
	// 更改用户名
	ChangeUsername(context.Context, *ChangeUsernameRequest) (*TxResult, error)
	// 更改昵称
	ChangeNickname(context.Context, *ChangeNicknameRequest) (*TxResult, error)
	// 上传会员头像
	ChangeProfilePhoto(context.Context, *ChangeProfilePhotoRequest) (*TxResult, error)
	// * 更改密码
	ChangePassword(context.Context, *ChangePasswordRequest) (*TxResult, error)
	// * 更改交易密码
	ChangeTradePassword(context.Context, *ChangePasswordRequest) (*TxResult, error)
	// 检查资料是否完善
	CheckProfileCompleted(context.Context, *Int64) (*Bool, error)
	// * 设置或更改邀请人
	SetInviter(context.Context, *SetInviterRequest) (*TxResult, error)
	// 升级为高级会员
	Premium(context.Context, *PremiumRequest) (*Result, error)
	// 获取会员的会员Token,reset表示是否重置token
	GetToken(context.Context, *GetTokenRequest) (*String, error)
	// 检查会员的会话Token是否正确，如正确返回: 1
	CheckToken(context.Context, *CheckTokenRequest) (*Bool, error)
	// 移除会员的Token,memberId
	RemoveToken(context.Context, *MemberIdRequest) (*Empty, error)
	// 获取会员的收货地址,memberId
	GetAddressList(context.Context, *MemberIdRequest) (*AddressListResponse, error)
	// 保存会员的收货地址
	SaveAddress(context.Context, *SaveAddressRequest) (*SaveAddressResponse, error)
	// 获取地址，如果addrId为0，则返回默认地址
	GetAddress(context.Context, *GetAddressRequest) (*SAddress, error)
	// 删除配送地址
	DeleteAddress(context.Context, *AddressIdRequest) (*Result, error)
	// 获取会员账户信息,memberId
	GetAccount(context.Context, *MemberIdRequest) (*SAccount, error)
	// 判断会员是否由指定会员邀请推荐的
	IsInvitation(context.Context, *IsInvitationRequest) (*Bool, error)
	// 获取自己的邀请人会员编号数组
	InviterArray(context.Context, *DepthRequest) (*InviterIdListResponse, error)
	// 获取邀请会员的数量
	InviteMembersQuantity(context.Context, *DepthRequest) (*Int32, error)
	// 按条件获取荐指定等级会员的数量
	QueryInviteQuantity(context.Context, *InviteQuantityRequest) (*Int64, error)
	// 按条件获取荐指定等级会员的列表
	QueryInviteArray(context.Context, *InviteQuantityRequest) (*MemberIdListResponse, error)
	// 获取我邀请的会员及会员邀请的人数
	GetPagingInvitationMembers(context.Context, *MemberInvitationPagingRequest) (*MemberInvitationPagingResponse, error)
	// 账户充值,amount精确到分
	AccountCharge(context.Context, *AccountChangeRequest) (*TxResult, error)
	// 账户入账
	AccountCarryTo(context.Context, *AccountCarryRequest) (*TxResult, error)
	// 账户消耗,amount精确到分
	AccountConsume(context.Context, *AccountChangeRequest) (*TxResult, error)
	// 账户预扣消耗(预扣转消费),amount精确到分
	PrefreezeConsume(context.Context, *UserPrefreezeConsumeRequest) (*TxResult, error)
	// 账户抵扣,amount精确到分
	AccountDiscount(context.Context, *AccountChangeRequest) (*TxResult, error)
	// * 账户冻结
	Freeze(context.Context, *AccountFreezeRequest) (*TxResult, error)
	// * 账户解冻
	Unfreeze(context.Context, *AccountUnfreezeRequest) (*TxResult, error)
	// 账户退款,amount精确到分
	AccountRefund(context.Context, *AccountChangeRequest) (*TxResult, error)
	// 账户人工调整
	AccountAdjust(context.Context, *AccountAdjustRequest) (*TxResult, error)
	// 转账转账
	AccountTransfer(context.Context, *AccountTransferRequest) (*TxResult, error)
	// 提现并返回提现编号,交易号以及错误信息
	RequestWithdrawal(context.Context, *UserWithdrawRequest) (*TxResult, error)
	// 确认提现
	ReviewWithdrawal(context.Context, *ReviewUserWithdrawalRequest) (*TxResult, error)
	// 完成交易(如：提现到账)
	CompleteTransaction(context.Context, *FinishUserTransactionRequest) (*TxResult, error)
	// 查询提现记录
	QueryWithdrawalLog(context.Context, *WithdrawalLogRequest) (*WithdrawalLogResponse, error)
	// 提交充值支付单
	SubmitRechargePaymentOrder(context.Context, *SubmitRechargePaymentOrderRequest) (*RechargePaymentOrderResponse, error)
	// 绑定第三方应用
	BindOAuthApp(context.Context, *SMemberOAuthAccount) (*Result, error)
	// 解除第三方应用绑定
	UnbindOAuthApp(context.Context, *MemberOAuthRequest) (*Result, error)
	// 获取第三方应用绑定信息
	GetOAuthBindInfo(context.Context, *MemberOAuthRequest) (*SMemberOAuthAccount, error)
	// !银行四要素认证
	B4EAuth(context.Context, *B4EAuthRequest) (*Result, error)
	// 获取钱包流水记录
	GetWalletTxLog(context.Context, *UserWalletTxId) (*UserWalletTxResponse, error)
	// 取消收藏
	RemoveFavorite(context.Context, *FavoriteRequest) (*Result, error)
	// 收藏商品
	Favorite(context.Context, *FavoriteRequest) (*Result, error)
	// 是否已收藏
	IsFavored(context.Context, *FavoriteRequest) (*Bool, error)
	// 查询优惠券
	QueryCoupons(context.Context, *MemberCouponPagingRequest) (*MemberCouponListResponse, error)
	mustEmbedUnimplementedMemberServiceServer()
}

// UnimplementedMemberServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMemberServiceServer struct{}

func (UnimplementedMemberServiceServer) Register(context.Context, *RegisterMemberRequest) (*RegisterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Register not implemented")
}
func (UnimplementedMemberServiceServer) CheckLogin(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckLogin not implemented")
}
func (UnimplementedMemberServiceServer) OAuthLogin(context.Context, *OAuthLoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method OAuthLogin not implemented")
}
func (UnimplementedMemberServiceServer) GetOAuthInfo(context.Context, *OAuthUserInfoRequest) (*OAuthUserInfoResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOAuthInfo not implemented")
}
func (UnimplementedMemberServiceServer) VerifyTradePassword(context.Context, *VerifyPasswordRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method VerifyTradePassword not implemented")
}
func (UnimplementedMemberServiceServer) GetLevels(context.Context, *Empty) (*SMemberLevelListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLevels not implemented")
}
func (UnimplementedMemberServiceServer) GetCertification(context.Context, *MemberIdRequest) (*SCertificationInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCertification not implemented")
}
func (UnimplementedMemberServiceServer) SubmitCertification(context.Context, *SubmitCertificationRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitCertification not implemented")
}
func (UnimplementedMemberServiceServer) ReviewCertification(context.Context, *ReviewCertificationRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewCertification not implemented")
}
func (UnimplementedMemberServiceServer) RejectCertification(context.Context, *RejectCertificationRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RejectCertification not implemented")
}
func (UnimplementedMemberServiceServer) GetMemberLevel(context.Context, *Int32) (*SMemberLevel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMemberLevel not implemented")
}
func (UnimplementedMemberServiceServer) SaveMemberLevel(context.Context, *SMemberLevel) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveMemberLevel not implemented")
}
func (UnimplementedMemberServiceServer) GetLevelBySign(context.Context, *String) (*SMemberLevel, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLevelBySign not implemented")
}
func (UnimplementedMemberServiceServer) DeleteMemberLevel(context.Context, *Int64) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteMemberLevel not implemented")
}
func (UnimplementedMemberServiceServer) GetMember(context.Context, *MemberIdRequest) (*SMember, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMember not implemented")
}
func (UnimplementedMemberServiceServer) FindMember(context.Context, *FindMemberRequest) (*FindMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindMember not implemented")
}
func (UnimplementedMemberServiceServer) GetProfile(context.Context, *MemberIdRequest) (*SProfile, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProfile not implemented")
}
func (UnimplementedMemberServiceServer) SaveProfile(context.Context, *SProfile) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveProfile not implemented")
}
func (UnimplementedMemberServiceServer) GetInviter(context.Context, *MemberIdRequest) (*MemberInviterResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInviter not implemented")
}
func (UnimplementedMemberServiceServer) GetInviteCount(context.Context, *MemberIdRequest) (*MemberInviteCountResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetInviteCount not implemented")
}
func (UnimplementedMemberServiceServer) BlockOrShield(context.Context, *MemberBlockShieldRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BlockOrShield not implemented")
}
func (UnimplementedMemberServiceServer) IsBlockOrShield(context.Context, *MembersIdRequest) (*MemberBlockShieldResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsBlockOrShield not implemented")
}
func (UnimplementedMemberServiceServer) GetBankCards(context.Context, *MemberIdRequest) (*BankCardListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetBankCards not implemented")
}
func (UnimplementedMemberServiceServer) AddBankCard(context.Context, *BankCardAddRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddBankCard not implemented")
}
func (UnimplementedMemberServiceServer) RemoveBankCard(context.Context, *BankCardRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveBankCard not implemented")
}
func (UnimplementedMemberServiceServer) Active(context.Context, *MemberIdRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Active not implemented")
}
func (UnimplementedMemberServiceServer) Lock(context.Context, *LockRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Lock not implemented")
}
func (UnimplementedMemberServiceServer) Unlock(context.Context, *MemberIdRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unlock not implemented")
}
func (UnimplementedMemberServiceServer) GrantFlag(context.Context, *GrantFlagRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GrantFlag not implemented")
}
func (UnimplementedMemberServiceServer) Complex(context.Context, *MemberIdRequest) (*SComplexMember, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Complex not implemented")
}
func (UnimplementedMemberServiceServer) SendCode(context.Context, *SendCodeRequest) (*SendCodeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SendCode not implemented")
}
func (UnimplementedMemberServiceServer) CompareCode(context.Context, *CompareCodeRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompareCode not implemented")
}
func (UnimplementedMemberServiceServer) ReceiptsCodes(context.Context, *MemberIdRequest) (*SReceiptsCodeListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReceiptsCodes not implemented")
}
func (UnimplementedMemberServiceServer) SaveReceiptsCode(context.Context, *ReceiptsCodeSaveRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveReceiptsCode not implemented")
}
func (UnimplementedMemberServiceServer) SetPayPriority(context.Context, *PayPriorityRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetPayPriority not implemented")
}
func (UnimplementedMemberServiceServer) CheckProfileComplete(context.Context, *MemberIdRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckProfileComplete not implemented")
}
func (UnimplementedMemberServiceServer) MemberLevelInfo(context.Context, *MemberIdRequest) (*SMemberLevelInfo, error) {
	return nil, status.Errorf(codes.Unimplemented, "method MemberLevelInfo not implemented")
}
func (UnimplementedMemberServiceServer) ChangeLevel(context.Context, *ChangeLevelRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeLevel not implemented")
}
func (UnimplementedMemberServiceServer) ReviewLevelUpRequest(context.Context, *LevelUpReviewRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewLevelUpRequest not implemented")
}
func (UnimplementedMemberServiceServer) ConfirmLevelUpRequest(context.Context, *LevelUpConfirmRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConfirmLevelUpRequest not implemented")
}
func (UnimplementedMemberServiceServer) ChangePhone(context.Context, *ChangePhoneRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePhone not implemented")
}
func (UnimplementedMemberServiceServer) ChangeUsername(context.Context, *ChangeUsernameRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeUsername not implemented")
}
func (UnimplementedMemberServiceServer) ChangeNickname(context.Context, *ChangeNicknameRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeNickname not implemented")
}
func (UnimplementedMemberServiceServer) ChangeProfilePhoto(context.Context, *ChangeProfilePhotoRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeProfilePhoto not implemented")
}
func (UnimplementedMemberServiceServer) ChangePassword(context.Context, *ChangePasswordRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangePassword not implemented")
}
func (UnimplementedMemberServiceServer) ChangeTradePassword(context.Context, *ChangePasswordRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ChangeTradePassword not implemented")
}
func (UnimplementedMemberServiceServer) CheckProfileCompleted(context.Context, *Int64) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckProfileCompleted not implemented")
}
func (UnimplementedMemberServiceServer) SetInviter(context.Context, *SetInviterRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SetInviter not implemented")
}
func (UnimplementedMemberServiceServer) Premium(context.Context, *PremiumRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Premium not implemented")
}
func (UnimplementedMemberServiceServer) GetToken(context.Context, *GetTokenRequest) (*String, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetToken not implemented")
}
func (UnimplementedMemberServiceServer) CheckToken(context.Context, *CheckTokenRequest) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CheckToken not implemented")
}
func (UnimplementedMemberServiceServer) RemoveToken(context.Context, *MemberIdRequest) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveToken not implemented")
}
func (UnimplementedMemberServiceServer) GetAddressList(context.Context, *MemberIdRequest) (*AddressListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddressList not implemented")
}
func (UnimplementedMemberServiceServer) SaveAddress(context.Context, *SaveAddressRequest) (*SaveAddressResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SaveAddress not implemented")
}
func (UnimplementedMemberServiceServer) GetAddress(context.Context, *GetAddressRequest) (*SAddress, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAddress not implemented")
}
func (UnimplementedMemberServiceServer) DeleteAddress(context.Context, *AddressIdRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteAddress not implemented")
}
func (UnimplementedMemberServiceServer) GetAccount(context.Context, *MemberIdRequest) (*SAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAccount not implemented")
}
func (UnimplementedMemberServiceServer) IsInvitation(context.Context, *IsInvitationRequest) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsInvitation not implemented")
}
func (UnimplementedMemberServiceServer) InviterArray(context.Context, *DepthRequest) (*InviterIdListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviterArray not implemented")
}
func (UnimplementedMemberServiceServer) InviteMembersQuantity(context.Context, *DepthRequest) (*Int32, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InviteMembersQuantity not implemented")
}
func (UnimplementedMemberServiceServer) QueryInviteQuantity(context.Context, *InviteQuantityRequest) (*Int64, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryInviteQuantity not implemented")
}
func (UnimplementedMemberServiceServer) QueryInviteArray(context.Context, *InviteQuantityRequest) (*MemberIdListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryInviteArray not implemented")
}
func (UnimplementedMemberServiceServer) GetPagingInvitationMembers(context.Context, *MemberInvitationPagingRequest) (*MemberInvitationPagingResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPagingInvitationMembers not implemented")
}
func (UnimplementedMemberServiceServer) AccountCharge(context.Context, *AccountChangeRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountCharge not implemented")
}
func (UnimplementedMemberServiceServer) AccountCarryTo(context.Context, *AccountCarryRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountCarryTo not implemented")
}
func (UnimplementedMemberServiceServer) AccountConsume(context.Context, *AccountChangeRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountConsume not implemented")
}
func (UnimplementedMemberServiceServer) PrefreezeConsume(context.Context, *UserPrefreezeConsumeRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PrefreezeConsume not implemented")
}
func (UnimplementedMemberServiceServer) AccountDiscount(context.Context, *AccountChangeRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountDiscount not implemented")
}
func (UnimplementedMemberServiceServer) Freeze(context.Context, *AccountFreezeRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Freeze not implemented")
}
func (UnimplementedMemberServiceServer) Unfreeze(context.Context, *AccountUnfreezeRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Unfreeze not implemented")
}
func (UnimplementedMemberServiceServer) AccountRefund(context.Context, *AccountChangeRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountRefund not implemented")
}
func (UnimplementedMemberServiceServer) AccountAdjust(context.Context, *AccountAdjustRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountAdjust not implemented")
}
func (UnimplementedMemberServiceServer) AccountTransfer(context.Context, *AccountTransferRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AccountTransfer not implemented")
}
func (UnimplementedMemberServiceServer) RequestWithdrawal(context.Context, *UserWithdrawRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RequestWithdrawal not implemented")
}
func (UnimplementedMemberServiceServer) ReviewWithdrawal(context.Context, *ReviewUserWithdrawalRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReviewWithdrawal not implemented")
}
func (UnimplementedMemberServiceServer) CompleteTransaction(context.Context, *FinishUserTransactionRequest) (*TxResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteTransaction not implemented")
}
func (UnimplementedMemberServiceServer) QueryWithdrawalLog(context.Context, *WithdrawalLogRequest) (*WithdrawalLogResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryWithdrawalLog not implemented")
}
func (UnimplementedMemberServiceServer) SubmitRechargePaymentOrder(context.Context, *SubmitRechargePaymentOrderRequest) (*RechargePaymentOrderResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitRechargePaymentOrder not implemented")
}
func (UnimplementedMemberServiceServer) BindOAuthApp(context.Context, *SMemberOAuthAccount) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method BindOAuthApp not implemented")
}
func (UnimplementedMemberServiceServer) UnbindOAuthApp(context.Context, *MemberOAuthRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnbindOAuthApp not implemented")
}
func (UnimplementedMemberServiceServer) GetOAuthBindInfo(context.Context, *MemberOAuthRequest) (*SMemberOAuthAccount, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetOAuthBindInfo not implemented")
}
func (UnimplementedMemberServiceServer) B4EAuth(context.Context, *B4EAuthRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method B4EAuth not implemented")
}
func (UnimplementedMemberServiceServer) GetWalletTxLog(context.Context, *UserWalletTxId) (*UserWalletTxResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetWalletTxLog not implemented")
}
func (UnimplementedMemberServiceServer) RemoveFavorite(context.Context, *FavoriteRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveFavorite not implemented")
}
func (UnimplementedMemberServiceServer) Favorite(context.Context, *FavoriteRequest) (*Result, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Favorite not implemented")
}
func (UnimplementedMemberServiceServer) IsFavored(context.Context, *FavoriteRequest) (*Bool, error) {
	return nil, status.Errorf(codes.Unimplemented, "method IsFavored not implemented")
}
func (UnimplementedMemberServiceServer) QueryCoupons(context.Context, *MemberCouponPagingRequest) (*MemberCouponListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method QueryCoupons not implemented")
}
func (UnimplementedMemberServiceServer) mustEmbedUnimplementedMemberServiceServer() {}
func (UnimplementedMemberServiceServer) testEmbeddedByValue()                       {}

// UnsafeMemberServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MemberServiceServer will
// result in compilation errors.
type UnsafeMemberServiceServer interface {
	mustEmbedUnimplementedMemberServiceServer()
}

func RegisterMemberServiceServer(s grpc.ServiceRegistrar, srv MemberServiceServer) {
	// If the following call pancis, it indicates UnimplementedMemberServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MemberService_ServiceDesc, srv)
}

func _MemberService_Register_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).Register(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_Register_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).Register(ctx, req.(*RegisterMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_CheckLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).CheckLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_CheckLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).CheckLogin(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_OAuthLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OAuthLoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).OAuthLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_OAuthLogin_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).OAuthLogin(ctx, req.(*OAuthLoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetOAuthInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(OAuthUserInfoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetOAuthInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_GetOAuthInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetOAuthInfo(ctx, req.(*OAuthUserInfoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_VerifyTradePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VerifyPasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).VerifyTradePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_VerifyTradePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).VerifyTradePassword(ctx, req.(*VerifyPasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetLevels_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetLevels(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_GetLevels_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetLevels(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetCertification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetCertification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_GetCertification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetCertification(ctx, req.(*MemberIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_SubmitCertification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitCertificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).SubmitCertification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_SubmitCertification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).SubmitCertification(ctx, req.(*SubmitCertificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_ReviewCertification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewCertificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).ReviewCertification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_ReviewCertification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).ReviewCertification(ctx, req.(*ReviewCertificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_RejectCertification_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RejectCertificationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).RejectCertification(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_RejectCertification_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).RejectCertification(ctx, req.(*RejectCertificationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetMemberLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int32)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetMemberLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_GetMemberLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetMemberLevel(ctx, req.(*Int32))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_SaveMemberLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SMemberLevel)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).SaveMemberLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_SaveMemberLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).SaveMemberLevel(ctx, req.(*SMemberLevel))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetLevelBySign_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(String)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetLevelBySign(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_GetLevelBySign_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetLevelBySign(ctx, req.(*String))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_DeleteMemberLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).DeleteMemberLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_DeleteMemberLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).DeleteMemberLevel(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_GetMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetMember(ctx, req.(*MemberIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_FindMember_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).FindMember(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_FindMember_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).FindMember(ctx, req.(*FindMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_GetProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetProfile(ctx, req.(*MemberIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_SaveProfile_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SProfile)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).SaveProfile(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_SaveProfile_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).SaveProfile(ctx, req.(*SProfile))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetInviter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetInviter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_GetInviter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetInviter(ctx, req.(*MemberIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetInviteCount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetInviteCount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_GetInviteCount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetInviteCount(ctx, req.(*MemberIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_BlockOrShield_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberBlockShieldRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).BlockOrShield(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_BlockOrShield_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).BlockOrShield(ctx, req.(*MemberBlockShieldRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_IsBlockOrShield_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MembersIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).IsBlockOrShield(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_IsBlockOrShield_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).IsBlockOrShield(ctx, req.(*MembersIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetBankCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetBankCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_GetBankCards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetBankCards(ctx, req.(*MemberIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_AddBankCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankCardAddRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).AddBankCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_AddBankCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).AddBankCard(ctx, req.(*BankCardAddRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_RemoveBankCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BankCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).RemoveBankCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_RemoveBankCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).RemoveBankCard(ctx, req.(*BankCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_Active_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).Active(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_Active_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).Active(ctx, req.(*MemberIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_Lock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LockRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).Lock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_Lock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).Lock(ctx, req.(*LockRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_Unlock_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).Unlock(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_Unlock_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).Unlock(ctx, req.(*MemberIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GrantFlag_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GrantFlagRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GrantFlag(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_GrantFlag_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GrantFlag(ctx, req.(*GrantFlagRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_Complex_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).Complex(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_Complex_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).Complex(ctx, req.(*MemberIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_SendCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SendCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).SendCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_SendCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).SendCode(ctx, req.(*SendCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_CompareCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompareCodeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).CompareCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_CompareCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).CompareCode(ctx, req.(*CompareCodeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_ReceiptsCodes_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).ReceiptsCodes(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_ReceiptsCodes_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).ReceiptsCodes(ctx, req.(*MemberIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_SaveReceiptsCode_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReceiptsCodeSaveRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).SaveReceiptsCode(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_SaveReceiptsCode_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).SaveReceiptsCode(ctx, req.(*ReceiptsCodeSaveRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_SetPayPriority_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PayPriorityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).SetPayPriority(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_SetPayPriority_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).SetPayPriority(ctx, req.(*PayPriorityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_CheckProfileComplete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).CheckProfileComplete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_CheckProfileComplete_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).CheckProfileComplete(ctx, req.(*MemberIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_MemberLevelInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).MemberLevelInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_MemberLevelInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).MemberLevelInfo(ctx, req.(*MemberIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_ChangeLevel_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeLevelRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).ChangeLevel(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_ChangeLevel_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).ChangeLevel(ctx, req.(*ChangeLevelRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_ReviewLevelUpRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LevelUpReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).ReviewLevelUpRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_ReviewLevelUpRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).ReviewLevelUpRequest(ctx, req.(*LevelUpReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_ConfirmLevelUpRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LevelUpConfirmRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).ConfirmLevelUpRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_ConfirmLevelUpRequest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).ConfirmLevelUpRequest(ctx, req.(*LevelUpConfirmRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_ChangePhone_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePhoneRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).ChangePhone(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_ChangePhone_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).ChangePhone(ctx, req.(*ChangePhoneRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_ChangeUsername_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeUsernameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).ChangeUsername(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_ChangeUsername_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).ChangeUsername(ctx, req.(*ChangeUsernameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_ChangeNickname_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeNicknameRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).ChangeNickname(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_ChangeNickname_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).ChangeNickname(ctx, req.(*ChangeNicknameRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_ChangeProfilePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangeProfilePhotoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).ChangeProfilePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_ChangeProfilePhoto_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).ChangeProfilePhoto(ctx, req.(*ChangeProfilePhotoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_ChangePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).ChangePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_ChangePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).ChangePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_ChangeTradePassword_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ChangePasswordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).ChangeTradePassword(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_ChangeTradePassword_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).ChangeTradePassword(ctx, req.(*ChangePasswordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_CheckProfileCompleted_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Int64)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).CheckProfileCompleted(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_CheckProfileCompleted_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).CheckProfileCompleted(ctx, req.(*Int64))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_SetInviter_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SetInviterRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).SetInviter(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_SetInviter_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).SetInviter(ctx, req.(*SetInviterRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_Premium_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PremiumRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).Premium(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_Premium_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).Premium(ctx, req.(*PremiumRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_GetToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetToken(ctx, req.(*GetTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_CheckToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CheckTokenRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).CheckToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_CheckToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).CheckToken(ctx, req.(*CheckTokenRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_RemoveToken_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).RemoveToken(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_RemoveToken_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).RemoveToken(ctx, req.(*MemberIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetAddressList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetAddressList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_GetAddressList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetAddressList(ctx, req.(*MemberIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_SaveAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SaveAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).SaveAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_SaveAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).SaveAddress(ctx, req.(*SaveAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetAddressRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_GetAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetAddress(ctx, req.(*GetAddressRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_DeleteAddress_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddressIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).DeleteAddress(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_DeleteAddress_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).DeleteAddress(ctx, req.(*AddressIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetAccount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetAccount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_GetAccount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetAccount(ctx, req.(*MemberIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_IsInvitation_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(IsInvitationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).IsInvitation(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_IsInvitation_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).IsInvitation(ctx, req.(*IsInvitationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_InviterArray_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).InviterArray(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_InviterArray_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).InviterArray(ctx, req.(*DepthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_InviteMembersQuantity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DepthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).InviteMembersQuantity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_InviteMembersQuantity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).InviteMembersQuantity(ctx, req.(*DepthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_QueryInviteQuantity_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteQuantityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).QueryInviteQuantity(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_QueryInviteQuantity_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).QueryInviteQuantity(ctx, req.(*InviteQuantityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_QueryInviteArray_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InviteQuantityRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).QueryInviteArray(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_QueryInviteArray_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).QueryInviteArray(ctx, req.(*InviteQuantityRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetPagingInvitationMembers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberInvitationPagingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetPagingInvitationMembers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_GetPagingInvitationMembers_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetPagingInvitationMembers(ctx, req.(*MemberInvitationPagingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_AccountCharge_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).AccountCharge(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_AccountCharge_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).AccountCharge(ctx, req.(*AccountChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_AccountCarryTo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountCarryRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).AccountCarryTo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_AccountCarryTo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).AccountCarryTo(ctx, req.(*AccountCarryRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_AccountConsume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).AccountConsume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_AccountConsume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).AccountConsume(ctx, req.(*AccountChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_PrefreezeConsume_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserPrefreezeConsumeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).PrefreezeConsume(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_PrefreezeConsume_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).PrefreezeConsume(ctx, req.(*UserPrefreezeConsumeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_AccountDiscount_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).AccountDiscount(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_AccountDiscount_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).AccountDiscount(ctx, req.(*AccountChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_Freeze_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountFreezeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).Freeze(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_Freeze_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).Freeze(ctx, req.(*AccountFreezeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_Unfreeze_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountUnfreezeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).Unfreeze(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_Unfreeze_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).Unfreeze(ctx, req.(*AccountUnfreezeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_AccountRefund_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountChangeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).AccountRefund(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_AccountRefund_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).AccountRefund(ctx, req.(*AccountChangeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_AccountAdjust_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountAdjustRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).AccountAdjust(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_AccountAdjust_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).AccountAdjust(ctx, req.(*AccountAdjustRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_AccountTransfer_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AccountTransferRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).AccountTransfer(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_AccountTransfer_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).AccountTransfer(ctx, req.(*AccountTransferRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_RequestWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserWithdrawRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).RequestWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_RequestWithdrawal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).RequestWithdrawal(ctx, req.(*UserWithdrawRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_ReviewWithdrawal_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReviewUserWithdrawalRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).ReviewWithdrawal(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_ReviewWithdrawal_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).ReviewWithdrawal(ctx, req.(*ReviewUserWithdrawalRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_CompleteTransaction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FinishUserTransactionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).CompleteTransaction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_CompleteTransaction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).CompleteTransaction(ctx, req.(*FinishUserTransactionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_QueryWithdrawalLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(WithdrawalLogRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).QueryWithdrawalLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_QueryWithdrawalLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).QueryWithdrawalLog(ctx, req.(*WithdrawalLogRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_SubmitRechargePaymentOrder_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitRechargePaymentOrderRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).SubmitRechargePaymentOrder(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_SubmitRechargePaymentOrder_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).SubmitRechargePaymentOrder(ctx, req.(*SubmitRechargePaymentOrderRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_BindOAuthApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SMemberOAuthAccount)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).BindOAuthApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_BindOAuthApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).BindOAuthApp(ctx, req.(*SMemberOAuthAccount))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_UnbindOAuthApp_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberOAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).UnbindOAuthApp(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_UnbindOAuthApp_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).UnbindOAuthApp(ctx, req.(*MemberOAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetOAuthBindInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberOAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetOAuthBindInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_GetOAuthBindInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetOAuthBindInfo(ctx, req.(*MemberOAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_B4EAuth_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(B4EAuthRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).B4EAuth(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_B4EAuth_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).B4EAuth(ctx, req.(*B4EAuthRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_GetWalletTxLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserWalletTxId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).GetWalletTxLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_GetWalletTxLog_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).GetWalletTxLog(ctx, req.(*UserWalletTxId))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_RemoveFavorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).RemoveFavorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_RemoveFavorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).RemoveFavorite(ctx, req.(*FavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_Favorite_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).Favorite(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_Favorite_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).Favorite(ctx, req.(*FavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_IsFavored_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FavoriteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).IsFavored(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_IsFavored_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).IsFavored(ctx, req.(*FavoriteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MemberService_QueryCoupons_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MemberCouponPagingRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MemberServiceServer).QueryCoupons(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MemberService_QueryCoupons_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MemberServiceServer).QueryCoupons(ctx, req.(*MemberCouponPagingRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MemberService_ServiceDesc is the grpc.ServiceDesc for MemberService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MemberService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MemberService",
	HandlerType: (*MemberServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Register",
			Handler:    _MemberService_Register_Handler,
		},
		{
			MethodName: "CheckLogin",
			Handler:    _MemberService_CheckLogin_Handler,
		},
		{
			MethodName: "OAuthLogin",
			Handler:    _MemberService_OAuthLogin_Handler,
		},
		{
			MethodName: "GetOAuthInfo",
			Handler:    _MemberService_GetOAuthInfo_Handler,
		},
		{
			MethodName: "VerifyTradePassword",
			Handler:    _MemberService_VerifyTradePassword_Handler,
		},
		{
			MethodName: "GetLevels",
			Handler:    _MemberService_GetLevels_Handler,
		},
		{
			MethodName: "GetCertification",
			Handler:    _MemberService_GetCertification_Handler,
		},
		{
			MethodName: "SubmitCertification",
			Handler:    _MemberService_SubmitCertification_Handler,
		},
		{
			MethodName: "ReviewCertification",
			Handler:    _MemberService_ReviewCertification_Handler,
		},
		{
			MethodName: "RejectCertification",
			Handler:    _MemberService_RejectCertification_Handler,
		},
		{
			MethodName: "GetMemberLevel",
			Handler:    _MemberService_GetMemberLevel_Handler,
		},
		{
			MethodName: "SaveMemberLevel",
			Handler:    _MemberService_SaveMemberLevel_Handler,
		},
		{
			MethodName: "GetLevelBySign",
			Handler:    _MemberService_GetLevelBySign_Handler,
		},
		{
			MethodName: "DeleteMemberLevel",
			Handler:    _MemberService_DeleteMemberLevel_Handler,
		},
		{
			MethodName: "GetMember",
			Handler:    _MemberService_GetMember_Handler,
		},
		{
			MethodName: "FindMember",
			Handler:    _MemberService_FindMember_Handler,
		},
		{
			MethodName: "GetProfile",
			Handler:    _MemberService_GetProfile_Handler,
		},
		{
			MethodName: "SaveProfile",
			Handler:    _MemberService_SaveProfile_Handler,
		},
		{
			MethodName: "GetInviter",
			Handler:    _MemberService_GetInviter_Handler,
		},
		{
			MethodName: "GetInviteCount",
			Handler:    _MemberService_GetInviteCount_Handler,
		},
		{
			MethodName: "BlockOrShield",
			Handler:    _MemberService_BlockOrShield_Handler,
		},
		{
			MethodName: "IsBlockOrShield",
			Handler:    _MemberService_IsBlockOrShield_Handler,
		},
		{
			MethodName: "GetBankCards",
			Handler:    _MemberService_GetBankCards_Handler,
		},
		{
			MethodName: "AddBankCard",
			Handler:    _MemberService_AddBankCard_Handler,
		},
		{
			MethodName: "RemoveBankCard",
			Handler:    _MemberService_RemoveBankCard_Handler,
		},
		{
			MethodName: "Active",
			Handler:    _MemberService_Active_Handler,
		},
		{
			MethodName: "Lock",
			Handler:    _MemberService_Lock_Handler,
		},
		{
			MethodName: "Unlock",
			Handler:    _MemberService_Unlock_Handler,
		},
		{
			MethodName: "GrantFlag",
			Handler:    _MemberService_GrantFlag_Handler,
		},
		{
			MethodName: "Complex",
			Handler:    _MemberService_Complex_Handler,
		},
		{
			MethodName: "SendCode",
			Handler:    _MemberService_SendCode_Handler,
		},
		{
			MethodName: "compareCode",
			Handler:    _MemberService_CompareCode_Handler,
		},
		{
			MethodName: "ReceiptsCodes",
			Handler:    _MemberService_ReceiptsCodes_Handler,
		},
		{
			MethodName: "SaveReceiptsCode",
			Handler:    _MemberService_SaveReceiptsCode_Handler,
		},
		{
			MethodName: "SetPayPriority",
			Handler:    _MemberService_SetPayPriority_Handler,
		},
		{
			MethodName: "CheckProfileComplete",
			Handler:    _MemberService_CheckProfileComplete_Handler,
		},
		{
			MethodName: "MemberLevelInfo",
			Handler:    _MemberService_MemberLevelInfo_Handler,
		},
		{
			MethodName: "ChangeLevel",
			Handler:    _MemberService_ChangeLevel_Handler,
		},
		{
			MethodName: "ReviewLevelUpRequest",
			Handler:    _MemberService_ReviewLevelUpRequest_Handler,
		},
		{
			MethodName: "ConfirmLevelUpRequest",
			Handler:    _MemberService_ConfirmLevelUpRequest_Handler,
		},
		{
			MethodName: "ChangePhone",
			Handler:    _MemberService_ChangePhone_Handler,
		},
		{
			MethodName: "ChangeUsername",
			Handler:    _MemberService_ChangeUsername_Handler,
		},
		{
			MethodName: "ChangeNickname",
			Handler:    _MemberService_ChangeNickname_Handler,
		},
		{
			MethodName: "ChangeProfilePhoto",
			Handler:    _MemberService_ChangeProfilePhoto_Handler,
		},
		{
			MethodName: "ChangePassword",
			Handler:    _MemberService_ChangePassword_Handler,
		},
		{
			MethodName: "ChangeTradePassword",
			Handler:    _MemberService_ChangeTradePassword_Handler,
		},
		{
			MethodName: "CheckProfileCompleted",
			Handler:    _MemberService_CheckProfileCompleted_Handler,
		},
		{
			MethodName: "SetInviter",
			Handler:    _MemberService_SetInviter_Handler,
		},
		{
			MethodName: "Premium",
			Handler:    _MemberService_Premium_Handler,
		},
		{
			MethodName: "GetToken",
			Handler:    _MemberService_GetToken_Handler,
		},
		{
			MethodName: "CheckToken",
			Handler:    _MemberService_CheckToken_Handler,
		},
		{
			MethodName: "RemoveToken",
			Handler:    _MemberService_RemoveToken_Handler,
		},
		{
			MethodName: "GetAddressList",
			Handler:    _MemberService_GetAddressList_Handler,
		},
		{
			MethodName: "SaveAddress",
			Handler:    _MemberService_SaveAddress_Handler,
		},
		{
			MethodName: "GetAddress",
			Handler:    _MemberService_GetAddress_Handler,
		},
		{
			MethodName: "DeleteAddress",
			Handler:    _MemberService_DeleteAddress_Handler,
		},
		{
			MethodName: "GetAccount",
			Handler:    _MemberService_GetAccount_Handler,
		},
		{
			MethodName: "IsInvitation",
			Handler:    _MemberService_IsInvitation_Handler,
		},
		{
			MethodName: "InviterArray",
			Handler:    _MemberService_InviterArray_Handler,
		},
		{
			MethodName: "InviteMembersQuantity",
			Handler:    _MemberService_InviteMembersQuantity_Handler,
		},
		{
			MethodName: "QueryInviteQuantity",
			Handler:    _MemberService_QueryInviteQuantity_Handler,
		},
		{
			MethodName: "QueryInviteArray",
			Handler:    _MemberService_QueryInviteArray_Handler,
		},
		{
			MethodName: "GetPagingInvitationMembers",
			Handler:    _MemberService_GetPagingInvitationMembers_Handler,
		},
		{
			MethodName: "AccountCharge",
			Handler:    _MemberService_AccountCharge_Handler,
		},
		{
			MethodName: "AccountCarryTo",
			Handler:    _MemberService_AccountCarryTo_Handler,
		},
		{
			MethodName: "AccountConsume",
			Handler:    _MemberService_AccountConsume_Handler,
		},
		{
			MethodName: "PrefreezeConsume",
			Handler:    _MemberService_PrefreezeConsume_Handler,
		},
		{
			MethodName: "AccountDiscount",
			Handler:    _MemberService_AccountDiscount_Handler,
		},
		{
			MethodName: "Freeze",
			Handler:    _MemberService_Freeze_Handler,
		},
		{
			MethodName: "Unfreeze",
			Handler:    _MemberService_Unfreeze_Handler,
		},
		{
			MethodName: "AccountRefund",
			Handler:    _MemberService_AccountRefund_Handler,
		},
		{
			MethodName: "AccountAdjust",
			Handler:    _MemberService_AccountAdjust_Handler,
		},
		{
			MethodName: "AccountTransfer",
			Handler:    _MemberService_AccountTransfer_Handler,
		},
		{
			MethodName: "RequestWithdrawal",
			Handler:    _MemberService_RequestWithdrawal_Handler,
		},
		{
			MethodName: "ReviewWithdrawal",
			Handler:    _MemberService_ReviewWithdrawal_Handler,
		},
		{
			MethodName: "CompleteTransaction",
			Handler:    _MemberService_CompleteTransaction_Handler,
		},
		{
			MethodName: "QueryWithdrawalLog",
			Handler:    _MemberService_QueryWithdrawalLog_Handler,
		},
		{
			MethodName: "SubmitRechargePaymentOrder",
			Handler:    _MemberService_SubmitRechargePaymentOrder_Handler,
		},
		{
			MethodName: "BindOAuthApp",
			Handler:    _MemberService_BindOAuthApp_Handler,
		},
		{
			MethodName: "UnbindOAuthApp",
			Handler:    _MemberService_UnbindOAuthApp_Handler,
		},
		{
			MethodName: "GetOAuthBindInfo",
			Handler:    _MemberService_GetOAuthBindInfo_Handler,
		},
		{
			MethodName: "B4EAuth",
			Handler:    _MemberService_B4EAuth_Handler,
		},
		{
			MethodName: "GetWalletTxLog",
			Handler:    _MemberService_GetWalletTxLog_Handler,
		},
		{
			MethodName: "RemoveFavorite",
			Handler:    _MemberService_RemoveFavorite_Handler,
		},
		{
			MethodName: "Favorite",
			Handler:    _MemberService_Favorite_Handler,
		},
		{
			MethodName: "IsFavored",
			Handler:    _MemberService_IsFavored_Handler,
		},
		{
			MethodName: "QueryCoupons",
			Handler:    _MemberService_QueryCoupons_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "member_service.proto",
}
