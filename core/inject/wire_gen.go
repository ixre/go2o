// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package inject

import (
	"github.com/google/wire"
	"github.com/ixre/go2o/core/dao/impl"
	"github.com/ixre/go2o/core/domain/interface/ad"
	"github.com/ixre/go2o/core/domain/interface/aftersales"
	"github.com/ixre/go2o/core/domain/interface/approval"
	"github.com/ixre/go2o/core/domain/interface/cart"
	"github.com/ixre/go2o/core/domain/interface/chat"
	"github.com/ixre/go2o/core/domain/interface/content"
	"github.com/ixre/go2o/core/domain/interface/delivery"
	"github.com/ixre/go2o/core/domain/interface/express"
	"github.com/ixre/go2o/core/domain/interface/invoice"
	"github.com/ixre/go2o/core/domain/interface/item"
	"github.com/ixre/go2o/core/domain/interface/job"
	"github.com/ixre/go2o/core/domain/interface/member"
	"github.com/ixre/go2o/core/domain/interface/merchant"
	"github.com/ixre/go2o/core/domain/interface/merchant/shop"
	"github.com/ixre/go2o/core/domain/interface/merchant/staff"
	"github.com/ixre/go2o/core/domain/interface/merchant/user"
	"github.com/ixre/go2o/core/domain/interface/merchant/wholesaler"
	"github.com/ixre/go2o/core/domain/interface/message"
	"github.com/ixre/go2o/core/domain/interface/order"
	"github.com/ixre/go2o/core/domain/interface/payment"
	"github.com/ixre/go2o/core/domain/interface/personfinance"
	"github.com/ixre/go2o/core/domain/interface/pro_model"
	"github.com/ixre/go2o/core/domain/interface/product"
	"github.com/ixre/go2o/core/domain/interface/promotion"
	"github.com/ixre/go2o/core/domain/interface/rabc"
	"github.com/ixre/go2o/core/domain/interface/registry"
	"github.com/ixre/go2o/core/domain/interface/shipment"
	"github.com/ixre/go2o/core/domain/interface/sys"
	"github.com/ixre/go2o/core/domain/interface/valueobject"
	"github.com/ixre/go2o/core/domain/interface/wallet"
	"github.com/ixre/go2o/core/domain/interface/work/workorder"
	"github.com/ixre/go2o/core/event"
	"github.com/ixre/go2o/core/event/handler"
	"github.com/ixre/go2o/core/initial/provide"
	"github.com/ixre/go2o/core/query"
	"github.com/ixre/go2o/core/repos"
	impl2 "github.com/ixre/go2o/core/service/impl"
	"github.com/ixre/go2o/core/service/proto"
	"github.com/ixre/go2o/core/sp"
)

// Injectors from query.go:

func GetStationQueryService() *query.StationQuery {
	orm := provide.GetOrmInstance()
	stationQuery := query.NewStationQuery(orm)
	return stationQuery
}

// GetMerchantQueryService 商户查询服务
func GetMerchantQueryService() *query.MerchantQuery {
	app := provide.GetApp()
	db := provide.GetGOrm()
	iStaffRepo := repos.NewStaffRepo(db)
	iApprovalRepository := repos.NewApprovalRepository(db)
	orm := provide.GetOrmInstance()
	storageInterface := provide.GetStorageInstance()
	iWholesaleRepo := repos.NewWholesaleRepo(orm)
	iProductModelRepo := repos.NewProModelRepo(orm)
	iRegistryRepo := repos.NewRegistryRepo(orm, storageInterface)
	iCategoryRepo := repos.NewCategoryRepo(orm, iProductModelRepo, iRegistryRepo, storageInterface)
	iValueRepo := repos.NewValueRepo(orm, storageInterface)
	iProductRepo := repos.NewProductRepo(orm, iProductModelRepo, iValueRepo)
	iItemWholesaleRepo := repos.NewItemWholesaleRepo(orm)
	iExpressRepo := repos.NewExpressRepo(orm, iValueRepo)
	iShopRepo := repos.NewShopRepo(orm, storageInterface, iValueRepo, iRegistryRepo)
	iItemRepo := repos.NewGoodsItemRepo(orm, iCategoryRepo, iProductRepo, iProductModelRepo, iItemWholesaleRepo, iExpressRepo, iRegistryRepo, iShopRepo)
	iUserRepo := repos.NewUserRepo(orm)
	iWalletRepo := repos.NewWalletRepo(orm, db)
	iNotifyRepo := repos.NewNotifyRepo(orm, db, iRegistryRepo)
	iMessageRepo := repos.NewMssRepo(orm, iNotifyRepo, iRegistryRepo, iValueRepo)
	iSystemRepo := repos.NewSystemRepo(db, storageInterface)
	iMemberRepo := repos.NewMemberRepo(storageInterface, orm, db, iWalletRepo, iMessageRepo, iValueRepo, iRegistryRepo, iSystemRepo)
	iInvoiceRepo := repos.NewInvoiceTenantRepo(db)
	iRbacRepository := repos.NewRbacRepo(db)
	iMerchantRepo := repos.NewMerchantRepo(orm, db, storageInterface, iWholesaleRepo, iItemRepo, iShopRepo, iUserRepo, iStaffRepo, iMemberRepo, iSystemRepo, iMessageRepo, iWalletRepo, iValueRepo, iRegistryRepo, iInvoiceRepo, iApprovalRepository, iRbacRepository)
	merchantQuery := query.NewMerchantQuery(app, db, iStaffRepo, iApprovalRepository, iMerchantRepo, iWalletRepo)
	return merchantQuery
}

// GetMemberQueryService 会员查询服务
func GetMemberQueryService() *query.MemberQuery {
	orm := provide.GetOrmInstance()
	db := provide.GetGOrm()
	memberQuery := query.NewMemberQuery(orm, db)
	return memberQuery
}

// GetContentQuery 获取内容查询服务
func GetContentQueryService() *query.ContentQuery {
	orm := provide.GetOrmInstance()
	db := provide.GetGOrm()
	app := provide.GetApp()
	iStaffRepo := repos.NewStaffRepo(db)
	iApprovalRepository := repos.NewApprovalRepository(db)
	storageInterface := provide.GetStorageInstance()
	iWholesaleRepo := repos.NewWholesaleRepo(orm)
	iProductModelRepo := repos.NewProModelRepo(orm)
	iRegistryRepo := repos.NewRegistryRepo(orm, storageInterface)
	iCategoryRepo := repos.NewCategoryRepo(orm, iProductModelRepo, iRegistryRepo, storageInterface)
	iValueRepo := repos.NewValueRepo(orm, storageInterface)
	iProductRepo := repos.NewProductRepo(orm, iProductModelRepo, iValueRepo)
	iItemWholesaleRepo := repos.NewItemWholesaleRepo(orm)
	iExpressRepo := repos.NewExpressRepo(orm, iValueRepo)
	iShopRepo := repos.NewShopRepo(orm, storageInterface, iValueRepo, iRegistryRepo)
	iItemRepo := repos.NewGoodsItemRepo(orm, iCategoryRepo, iProductRepo, iProductModelRepo, iItemWholesaleRepo, iExpressRepo, iRegistryRepo, iShopRepo)
	iUserRepo := repos.NewUserRepo(orm)
	iWalletRepo := repos.NewWalletRepo(orm, db)
	iNotifyRepo := repos.NewNotifyRepo(orm, db, iRegistryRepo)
	iMessageRepo := repos.NewMssRepo(orm, iNotifyRepo, iRegistryRepo, iValueRepo)
	iSystemRepo := repos.NewSystemRepo(db, storageInterface)
	iMemberRepo := repos.NewMemberRepo(storageInterface, orm, db, iWalletRepo, iMessageRepo, iValueRepo, iRegistryRepo, iSystemRepo)
	iInvoiceRepo := repos.NewInvoiceTenantRepo(db)
	iRbacRepository := repos.NewRbacRepo(db)
	iMerchantRepo := repos.NewMerchantRepo(orm, db, storageInterface, iWholesaleRepo, iItemRepo, iShopRepo, iUserRepo, iStaffRepo, iMemberRepo, iSystemRepo, iMessageRepo, iWalletRepo, iValueRepo, iRegistryRepo, iInvoiceRepo, iApprovalRepository, iRbacRepository)
	merchantQuery := query.NewMerchantQuery(app, db, iStaffRepo, iApprovalRepository, iMerchantRepo, iWalletRepo)
	memberQuery := query.NewMemberQuery(orm, db)
	contentQuery := query.NewContentQuery(orm, db, merchantQuery, memberQuery, iMerchantRepo)
	return contentQuery
}

func GetWorkQueryService() *query.WorkQuery {
	db := provide.GetGOrm()
	workQuery := query.NewWorkQuery(db)
	return workQuery
}

// GetWalletQueryService 获取钱包查询服务
func GetWalletQueryService() *query.WalletQuery {
	db := provide.GetGOrm()
	walletQuery := query.NewWalletQuery(db)
	return walletQuery
}

// GetInvoiceQueryService 获取发票查询服务
func GetInvoiceQueryService() *query.InvoiceQuery {
	db := provide.GetGOrm()
	invoiceQuery := query.NewInvoiceQuery(db)
	return invoiceQuery
}

// GetOrderQueryService 获取广告查询服务
func GetAdvertisementQueryService() *query.AdvertisementQuery {
	db := provide.GetGOrm()
	advertisementQuery := query.NewAdvertisementQuery(db)
	return advertisementQuery
}

// GetStatisticsQueryService 获取统计查询服务
func GetStatisticsQueryService() *query.StatisticsQuery {
	orm := provide.GetOrmInstance()
	db := provide.GetGOrm()
	storageInterface := provide.GetStorageInstance()
	statisticsQuery := query.NewStatisticsQuery(orm, db, storageInterface)
	return statisticsQuery
}

// GetPaymentQueryService 获取支付查询服务
func GetPaymentQueryService() *query.PaymentQuery {
	db := provide.GetGOrm()
	paymentQuery := query.NewPaymentQuery(db)
	return paymentQuery
}

// GetSystemQueryService 获取系统查询服务
func GetSystemQueryService() *query.SystemQuery {
	db := provide.GetGOrm()
	systemQuery := query.NewSystemQuery(db)
	return systemQuery
}

// Injectors from repo.go:

func GetProModelRepo() promodel.IProductModelRepo {
	orm := provide.GetOrmInstance()
	iProductModelRepo := repos.NewProModelRepo(orm)
	return iProductModelRepo
}

// 获取系统仓库
func GetSystemRepo() sys.ISystemRepo {
	db := provide.GetGOrm()
	storageInterface := provide.GetStorageInstance()
	iSystemRepo := repos.NewSystemRepo(db, storageInterface)
	return iSystemRepo
}

func GetValueRepo() valueobject.IValueRepo {
	orm := provide.GetOrmInstance()
	storageInterface := provide.GetStorageInstance()
	iValueRepo := repos.NewValueRepo(orm, storageInterface)
	return iValueRepo
}

func GetUserRepo() user.IUserRepo {
	orm := provide.GetOrmInstance()
	iUserRepo := repos.NewUserRepo(orm)
	return iUserRepo
}

func GetNotifyRepo() mss.INotifyRepo {
	orm := provide.GetOrmInstance()
	db := provide.GetGOrm()
	storageInterface := provide.GetStorageInstance()
	iRegistryRepo := repos.NewRegistryRepo(orm, storageInterface)
	iNotifyRepo := repos.NewNotifyRepo(orm, db, iRegistryRepo)
	return iNotifyRepo
}

func GetMessageRepo() mss.IMessageRepo {
	orm := provide.GetOrmInstance()
	db := provide.GetGOrm()
	storageInterface := provide.GetStorageInstance()
	iRegistryRepo := repos.NewRegistryRepo(orm, storageInterface)
	iNotifyRepo := repos.NewNotifyRepo(orm, db, iRegistryRepo)
	iValueRepo := repos.NewValueRepo(orm, storageInterface)
	iMessageRepo := repos.NewMssRepo(orm, iNotifyRepo, iRegistryRepo, iValueRepo)
	return iMessageRepo
}

func GetExpressRepo() express.IExpressRepo {
	orm := provide.GetOrmInstance()
	storageInterface := provide.GetStorageInstance()
	iValueRepo := repos.NewValueRepo(orm, storageInterface)
	iExpressRepo := repos.NewExpressRepo(orm, iValueRepo)
	return iExpressRepo
}

func GetShipmentRepo() shipment.IShipmentRepo {
	orm := provide.GetOrmInstance()
	storageInterface := provide.GetStorageInstance()
	iValueRepo := repos.NewValueRepo(orm, storageInterface)
	iExpressRepo := repos.NewExpressRepo(orm, iValueRepo)
	iShipmentRepo := repos.NewShipmentRepo(orm, iExpressRepo)
	return iShipmentRepo
}

func GetMemberRepo() member.IMemberRepo {
	storageInterface := provide.GetStorageInstance()
	orm := provide.GetOrmInstance()
	db := provide.GetGOrm()
	iWalletRepo := repos.NewWalletRepo(orm, db)
	iRegistryRepo := repos.NewRegistryRepo(orm, storageInterface)
	iNotifyRepo := repos.NewNotifyRepo(orm, db, iRegistryRepo)
	iValueRepo := repos.NewValueRepo(orm, storageInterface)
	iMessageRepo := repos.NewMssRepo(orm, iNotifyRepo, iRegistryRepo, iValueRepo)
	iSystemRepo := repos.NewSystemRepo(db, storageInterface)
	iMemberRepo := repos.NewMemberRepo(storageInterface, orm, db, iWalletRepo, iMessageRepo, iValueRepo, iRegistryRepo, iSystemRepo)
	return iMemberRepo
}

func GetProductRepo() product.IProductRepo {
	orm := provide.GetOrmInstance()
	iProductModelRepo := repos.NewProModelRepo(orm)
	storageInterface := provide.GetStorageInstance()
	iValueRepo := repos.NewValueRepo(orm, storageInterface)
	iProductRepo := repos.NewProductRepo(orm, iProductModelRepo, iValueRepo)
	return iProductRepo
}

func GetItemWholesaleRepo() item.IItemWholesaleRepo {
	orm := provide.GetOrmInstance()
	iItemWholesaleRepo := repos.NewItemWholesaleRepo(orm)
	return iItemWholesaleRepo
}

func GetCategoryRepo() product.ICategoryRepo {
	orm := provide.GetOrmInstance()
	iProductModelRepo := repos.NewProModelRepo(orm)
	storageInterface := provide.GetStorageInstance()
	iRegistryRepo := repos.NewRegistryRepo(orm, storageInterface)
	iCategoryRepo := repos.NewCategoryRepo(orm, iProductModelRepo, iRegistryRepo, storageInterface)
	return iCategoryRepo
}

func GetItemRepo() item.IItemRepo {
	orm := provide.GetOrmInstance()
	iProductModelRepo := repos.NewProModelRepo(orm)
	storageInterface := provide.GetStorageInstance()
	iRegistryRepo := repos.NewRegistryRepo(orm, storageInterface)
	iCategoryRepo := repos.NewCategoryRepo(orm, iProductModelRepo, iRegistryRepo, storageInterface)
	iValueRepo := repos.NewValueRepo(orm, storageInterface)
	iProductRepo := repos.NewProductRepo(orm, iProductModelRepo, iValueRepo)
	iItemWholesaleRepo := repos.NewItemWholesaleRepo(orm)
	iExpressRepo := repos.NewExpressRepo(orm, iValueRepo)
	iShopRepo := repos.NewShopRepo(orm, storageInterface, iValueRepo, iRegistryRepo)
	iItemRepo := repos.NewGoodsItemRepo(orm, iCategoryRepo, iProductRepo, iProductModelRepo, iItemWholesaleRepo, iExpressRepo, iRegistryRepo, iShopRepo)
	return iItemRepo
}

func GetSaleLabelRepo() item.ISaleLabelRepo {
	orm := provide.GetOrmInstance()
	storageInterface := provide.GetStorageInstance()
	iValueRepo := repos.NewValueRepo(orm, storageInterface)
	iSaleLabelRepo := repos.NewTagSaleRepo(orm, iValueRepo)
	return iSaleLabelRepo
}

func GetPromotionRepo() promotion.IPromotionRepo {
	orm := provide.GetOrmInstance()
	iProductModelRepo := repos.NewProModelRepo(orm)
	storageInterface := provide.GetStorageInstance()
	iRegistryRepo := repos.NewRegistryRepo(orm, storageInterface)
	iCategoryRepo := repos.NewCategoryRepo(orm, iProductModelRepo, iRegistryRepo, storageInterface)
	iValueRepo := repos.NewValueRepo(orm, storageInterface)
	iProductRepo := repos.NewProductRepo(orm, iProductModelRepo, iValueRepo)
	iItemWholesaleRepo := repos.NewItemWholesaleRepo(orm)
	iExpressRepo := repos.NewExpressRepo(orm, iValueRepo)
	iShopRepo := repos.NewShopRepo(orm, storageInterface, iValueRepo, iRegistryRepo)
	iItemRepo := repos.NewGoodsItemRepo(orm, iCategoryRepo, iProductRepo, iProductModelRepo, iItemWholesaleRepo, iExpressRepo, iRegistryRepo, iShopRepo)
	db := provide.GetGOrm()
	iWalletRepo := repos.NewWalletRepo(orm, db)
	iNotifyRepo := repos.NewNotifyRepo(orm, db, iRegistryRepo)
	iMessageRepo := repos.NewMssRepo(orm, iNotifyRepo, iRegistryRepo, iValueRepo)
	iSystemRepo := repos.NewSystemRepo(db, storageInterface)
	iMemberRepo := repos.NewMemberRepo(storageInterface, orm, db, iWalletRepo, iMessageRepo, iValueRepo, iRegistryRepo, iSystemRepo)
	iPromotionRepo := repos.NewPromotionRepo(orm, iItemRepo, iMemberRepo)
	return iPromotionRepo
}

func GetShopRepo() shop.IShopRepo {
	orm := provide.GetOrmInstance()
	storageInterface := provide.GetStorageInstance()
	iValueRepo := repos.NewValueRepo(orm, storageInterface)
	iRegistryRepo := repos.NewRegistryRepo(orm, storageInterface)
	iShopRepo := repos.NewShopRepo(orm, storageInterface, iValueRepo, iRegistryRepo)
	return iShopRepo
}

func GetWholesaleRepo() wholesaler.IWholesaleRepo {
	orm := provide.GetOrmInstance()
	iWholesaleRepo := repos.NewWholesaleRepo(orm)
	return iWholesaleRepo
}

func GetStationRepo() sys.IStationRepo {
	db := provide.GetGOrm()
	storageInterface := provide.GetStorageInstance()
	iSystemRepo := repos.NewSystemRepo(db, storageInterface)
	iStationRepo := repos.NewStationRepo(db, iSystemRepo)
	return iStationRepo
}

func GetMerchantRepo() merchant.IMerchantRepo {
	orm := provide.GetOrmInstance()
	db := provide.GetGOrm()
	storageInterface := provide.GetStorageInstance()
	iWholesaleRepo := repos.NewWholesaleRepo(orm)
	iProductModelRepo := repos.NewProModelRepo(orm)
	iRegistryRepo := repos.NewRegistryRepo(orm, storageInterface)
	iCategoryRepo := repos.NewCategoryRepo(orm, iProductModelRepo, iRegistryRepo, storageInterface)
	iValueRepo := repos.NewValueRepo(orm, storageInterface)
	iProductRepo := repos.NewProductRepo(orm, iProductModelRepo, iValueRepo)
	iItemWholesaleRepo := repos.NewItemWholesaleRepo(orm)
	iExpressRepo := repos.NewExpressRepo(orm, iValueRepo)
	iShopRepo := repos.NewShopRepo(orm, storageInterface, iValueRepo, iRegistryRepo)
	iItemRepo := repos.NewGoodsItemRepo(orm, iCategoryRepo, iProductRepo, iProductModelRepo, iItemWholesaleRepo, iExpressRepo, iRegistryRepo, iShopRepo)
	iUserRepo := repos.NewUserRepo(orm)
	iStaffRepo := repos.NewStaffRepo(db)
	iWalletRepo := repos.NewWalletRepo(orm, db)
	iNotifyRepo := repos.NewNotifyRepo(orm, db, iRegistryRepo)
	iMessageRepo := repos.NewMssRepo(orm, iNotifyRepo, iRegistryRepo, iValueRepo)
	iSystemRepo := repos.NewSystemRepo(db, storageInterface)
	iMemberRepo := repos.NewMemberRepo(storageInterface, orm, db, iWalletRepo, iMessageRepo, iValueRepo, iRegistryRepo, iSystemRepo)
	iInvoiceRepo := repos.NewInvoiceTenantRepo(db)
	iApprovalRepository := repos.NewApprovalRepository(db)
	iRbacRepository := repos.NewRbacRepo(db)
	iMerchantRepo := repos.NewMerchantRepo(orm, db, storageInterface, iWholesaleRepo, iItemRepo, iShopRepo, iUserRepo, iStaffRepo, iMemberRepo, iSystemRepo, iMessageRepo, iWalletRepo, iValueRepo, iRegistryRepo, iInvoiceRepo, iApprovalRepository, iRbacRepository)
	return iMerchantRepo
}

func GetCartRepo() cart.ICartRepo {
	orm := provide.GetOrmInstance()
	storageInterface := provide.GetStorageInstance()
	db := provide.GetGOrm()
	iWalletRepo := repos.NewWalletRepo(orm, db)
	iRegistryRepo := repos.NewRegistryRepo(orm, storageInterface)
	iNotifyRepo := repos.NewNotifyRepo(orm, db, iRegistryRepo)
	iValueRepo := repos.NewValueRepo(orm, storageInterface)
	iMessageRepo := repos.NewMssRepo(orm, iNotifyRepo, iRegistryRepo, iValueRepo)
	iSystemRepo := repos.NewSystemRepo(db, storageInterface)
	iMemberRepo := repos.NewMemberRepo(storageInterface, orm, db, iWalletRepo, iMessageRepo, iValueRepo, iRegistryRepo, iSystemRepo)
	iWholesaleRepo := repos.NewWholesaleRepo(orm)
	iProductModelRepo := repos.NewProModelRepo(orm)
	iCategoryRepo := repos.NewCategoryRepo(orm, iProductModelRepo, iRegistryRepo, storageInterface)
	iProductRepo := repos.NewProductRepo(orm, iProductModelRepo, iValueRepo)
	iItemWholesaleRepo := repos.NewItemWholesaleRepo(orm)
	iExpressRepo := repos.NewExpressRepo(orm, iValueRepo)
	iShopRepo := repos.NewShopRepo(orm, storageInterface, iValueRepo, iRegistryRepo)
	iItemRepo := repos.NewGoodsItemRepo(orm, iCategoryRepo, iProductRepo, iProductModelRepo, iItemWholesaleRepo, iExpressRepo, iRegistryRepo, iShopRepo)
	iUserRepo := repos.NewUserRepo(orm)
	iStaffRepo := repos.NewStaffRepo(db)
	iInvoiceRepo := repos.NewInvoiceTenantRepo(db)
	iApprovalRepository := repos.NewApprovalRepository(db)
	iRbacRepository := repos.NewRbacRepo(db)
	iMerchantRepo := repos.NewMerchantRepo(orm, db, storageInterface, iWholesaleRepo, iItemRepo, iShopRepo, iUserRepo, iStaffRepo, iMemberRepo, iSystemRepo, iMessageRepo, iWalletRepo, iValueRepo, iRegistryRepo, iInvoiceRepo, iApprovalRepository, iRbacRepository)
	iCartRepo := repos.NewCartRepo(orm, iMemberRepo, iMerchantRepo, iItemRepo)
	return iCartRepo
}

func GetPersonFinanceRepository() personfinance.IPersonFinanceRepository {
	orm := provide.GetOrmInstance()
	storageInterface := provide.GetStorageInstance()
	db := provide.GetGOrm()
	iWalletRepo := repos.NewWalletRepo(orm, db)
	iRegistryRepo := repos.NewRegistryRepo(orm, storageInterface)
	iNotifyRepo := repos.NewNotifyRepo(orm, db, iRegistryRepo)
	iValueRepo := repos.NewValueRepo(orm, storageInterface)
	iMessageRepo := repos.NewMssRepo(orm, iNotifyRepo, iRegistryRepo, iValueRepo)
	iSystemRepo := repos.NewSystemRepo(db, storageInterface)
	iMemberRepo := repos.NewMemberRepo(storageInterface, orm, db, iWalletRepo, iMessageRepo, iValueRepo, iRegistryRepo, iSystemRepo)
	iPersonFinanceRepository := repos.NewPersonFinanceRepository(orm, iMemberRepo)
	return iPersonFinanceRepository
}

func GetDeliveryRepo() delivery.IDeliveryRepo {
	orm := provide.GetOrmInstance()
	iDeliveryRepo := repos.NewDeliverRepo(orm)
	return iDeliveryRepo
}

func GetContentRepo() content.IArticleRepo {
	orm := provide.GetOrmInstance()
	db := provide.GetGOrm()
	iArticleCategoryRepo := repos.NewArticleCategoryRepo(db)
	iPageRepo := repos.NewPageRepo(db)
	storageInterface := provide.GetStorageInstance()
	iRegistryRepo := repos.NewRegistryRepo(orm, storageInterface)
	iArticleRepo := repos.NewArticleRepo(orm, db, iArticleCategoryRepo, iPageRepo, iRegistryRepo)
	return iArticleRepo
}

func GetArticleCategoryRepo() content.IArticleCategoryRepo {
	db := provide.GetGOrm()
	iArticleCategoryRepo := repos.NewArticleCategoryRepo(db)
	return iArticleCategoryRepo
}

func GetAdRepo() ad.IAdRepo {
	orm := provide.GetOrmInstance()
	db := provide.GetGOrm()
	storageInterface := provide.GetStorageInstance()
	iAdRepo := repos.NewAdvertisementRepo(orm, db, storageInterface)
	return iAdRepo
}

func GetOrderRepo() order.IOrderRepo {
	storageInterface := provide.GetStorageInstance()
	orm := provide.GetOrmInstance()
	db := provide.GetGOrm()
	iWholesaleRepo := repos.NewWholesaleRepo(orm)
	iProductModelRepo := repos.NewProModelRepo(orm)
	iRegistryRepo := repos.NewRegistryRepo(orm, storageInterface)
	iCategoryRepo := repos.NewCategoryRepo(orm, iProductModelRepo, iRegistryRepo, storageInterface)
	iValueRepo := repos.NewValueRepo(orm, storageInterface)
	iProductRepo := repos.NewProductRepo(orm, iProductModelRepo, iValueRepo)
	iItemWholesaleRepo := repos.NewItemWholesaleRepo(orm)
	iExpressRepo := repos.NewExpressRepo(orm, iValueRepo)
	iShopRepo := repos.NewShopRepo(orm, storageInterface, iValueRepo, iRegistryRepo)
	iItemRepo := repos.NewGoodsItemRepo(orm, iCategoryRepo, iProductRepo, iProductModelRepo, iItemWholesaleRepo, iExpressRepo, iRegistryRepo, iShopRepo)
	iUserRepo := repos.NewUserRepo(orm)
	iStaffRepo := repos.NewStaffRepo(db)
	iWalletRepo := repos.NewWalletRepo(orm, db)
	iNotifyRepo := repos.NewNotifyRepo(orm, db, iRegistryRepo)
	iMessageRepo := repos.NewMssRepo(orm, iNotifyRepo, iRegistryRepo, iValueRepo)
	iSystemRepo := repos.NewSystemRepo(db, storageInterface)
	iMemberRepo := repos.NewMemberRepo(storageInterface, orm, db, iWalletRepo, iMessageRepo, iValueRepo, iRegistryRepo, iSystemRepo)
	iInvoiceRepo := repos.NewInvoiceTenantRepo(db)
	iApprovalRepository := repos.NewApprovalRepository(db)
	iRbacRepository := repos.NewRbacRepo(db)
	iMerchantRepo := repos.NewMerchantRepo(orm, db, storageInterface, iWholesaleRepo, iItemRepo, iShopRepo, iUserRepo, iStaffRepo, iMemberRepo, iSystemRepo, iMessageRepo, iWalletRepo, iValueRepo, iRegistryRepo, iInvoiceRepo, iApprovalRepository, iRbacRepository)
	iPaymentRepo := repos.NewPaymentRepo(storageInterface, orm, db, iMemberRepo, iMerchantRepo, iRegistryRepo)
	iCartRepo := repos.NewCartRepo(orm, iMemberRepo, iMerchantRepo, iItemRepo)
	iPromotionRepo := repos.NewPromotionRepo(orm, iItemRepo, iMemberRepo)
	iDeliveryRepo := repos.NewDeliverRepo(orm)
	iShipmentRepo := repos.NewShipmentRepo(orm, iExpressRepo)
	iOrderRepo := repos.NewOrderRepo(storageInterface, orm, iMerchantRepo, iPaymentRepo, iProductRepo, iCartRepo, iItemRepo, iPromotionRepo, iMemberRepo, iDeliveryRepo, iExpressRepo, iShipmentRepo, iShopRepo, iValueRepo, iRegistryRepo)
	return iOrderRepo
}

func GetPaymentRepo() payment.IPaymentRepo {
	storageInterface := provide.GetStorageInstance()
	orm := provide.GetOrmInstance()
	db := provide.GetGOrm()
	iWalletRepo := repos.NewWalletRepo(orm, db)
	iRegistryRepo := repos.NewRegistryRepo(orm, storageInterface)
	iNotifyRepo := repos.NewNotifyRepo(orm, db, iRegistryRepo)
	iValueRepo := repos.NewValueRepo(orm, storageInterface)
	iMessageRepo := repos.NewMssRepo(orm, iNotifyRepo, iRegistryRepo, iValueRepo)
	iSystemRepo := repos.NewSystemRepo(db, storageInterface)
	iMemberRepo := repos.NewMemberRepo(storageInterface, orm, db, iWalletRepo, iMessageRepo, iValueRepo, iRegistryRepo, iSystemRepo)
	iWholesaleRepo := repos.NewWholesaleRepo(orm)
	iProductModelRepo := repos.NewProModelRepo(orm)
	iCategoryRepo := repos.NewCategoryRepo(orm, iProductModelRepo, iRegistryRepo, storageInterface)
	iProductRepo := repos.NewProductRepo(orm, iProductModelRepo, iValueRepo)
	iItemWholesaleRepo := repos.NewItemWholesaleRepo(orm)
	iExpressRepo := repos.NewExpressRepo(orm, iValueRepo)
	iShopRepo := repos.NewShopRepo(orm, storageInterface, iValueRepo, iRegistryRepo)
	iItemRepo := repos.NewGoodsItemRepo(orm, iCategoryRepo, iProductRepo, iProductModelRepo, iItemWholesaleRepo, iExpressRepo, iRegistryRepo, iShopRepo)
	iUserRepo := repos.NewUserRepo(orm)
	iStaffRepo := repos.NewStaffRepo(db)
	iInvoiceRepo := repos.NewInvoiceTenantRepo(db)
	iApprovalRepository := repos.NewApprovalRepository(db)
	iRbacRepository := repos.NewRbacRepo(db)
	iMerchantRepo := repos.NewMerchantRepo(orm, db, storageInterface, iWholesaleRepo, iItemRepo, iShopRepo, iUserRepo, iStaffRepo, iMemberRepo, iSystemRepo, iMessageRepo, iWalletRepo, iValueRepo, iRegistryRepo, iInvoiceRepo, iApprovalRepository, iRbacRepository)
	iPaymentRepo := repos.NewPaymentRepo(storageInterface, orm, db, iMemberRepo, iMerchantRepo, iRegistryRepo)
	return iPaymentRepo
}

func GetAfterSalesRepo() afterSales.IAfterSalesRepo {
	orm := provide.GetOrmInstance()
	storageInterface := provide.GetStorageInstance()
	db := provide.GetGOrm()
	iWholesaleRepo := repos.NewWholesaleRepo(orm)
	iProductModelRepo := repos.NewProModelRepo(orm)
	iRegistryRepo := repos.NewRegistryRepo(orm, storageInterface)
	iCategoryRepo := repos.NewCategoryRepo(orm, iProductModelRepo, iRegistryRepo, storageInterface)
	iValueRepo := repos.NewValueRepo(orm, storageInterface)
	iProductRepo := repos.NewProductRepo(orm, iProductModelRepo, iValueRepo)
	iItemWholesaleRepo := repos.NewItemWholesaleRepo(orm)
	iExpressRepo := repos.NewExpressRepo(orm, iValueRepo)
	iShopRepo := repos.NewShopRepo(orm, storageInterface, iValueRepo, iRegistryRepo)
	iItemRepo := repos.NewGoodsItemRepo(orm, iCategoryRepo, iProductRepo, iProductModelRepo, iItemWholesaleRepo, iExpressRepo, iRegistryRepo, iShopRepo)
	iUserRepo := repos.NewUserRepo(orm)
	iStaffRepo := repos.NewStaffRepo(db)
	iWalletRepo := repos.NewWalletRepo(orm, db)
	iNotifyRepo := repos.NewNotifyRepo(orm, db, iRegistryRepo)
	iMessageRepo := repos.NewMssRepo(orm, iNotifyRepo, iRegistryRepo, iValueRepo)
	iSystemRepo := repos.NewSystemRepo(db, storageInterface)
	iMemberRepo := repos.NewMemberRepo(storageInterface, orm, db, iWalletRepo, iMessageRepo, iValueRepo, iRegistryRepo, iSystemRepo)
	iInvoiceRepo := repos.NewInvoiceTenantRepo(db)
	iApprovalRepository := repos.NewApprovalRepository(db)
	iRbacRepository := repos.NewRbacRepo(db)
	iMerchantRepo := repos.NewMerchantRepo(orm, db, storageInterface, iWholesaleRepo, iItemRepo, iShopRepo, iUserRepo, iStaffRepo, iMemberRepo, iSystemRepo, iMessageRepo, iWalletRepo, iValueRepo, iRegistryRepo, iInvoiceRepo, iApprovalRepository, iRbacRepository)
	iPaymentRepo := repos.NewPaymentRepo(storageInterface, orm, db, iMemberRepo, iMerchantRepo, iRegistryRepo)
	iCartRepo := repos.NewCartRepo(orm, iMemberRepo, iMerchantRepo, iItemRepo)
	iPromotionRepo := repos.NewPromotionRepo(orm, iItemRepo, iMemberRepo)
	iDeliveryRepo := repos.NewDeliverRepo(orm)
	iShipmentRepo := repos.NewShipmentRepo(orm, iExpressRepo)
	iOrderRepo := repos.NewOrderRepo(storageInterface, orm, iMerchantRepo, iPaymentRepo, iProductRepo, iCartRepo, iItemRepo, iPromotionRepo, iMemberRepo, iDeliveryRepo, iExpressRepo, iShipmentRepo, iShopRepo, iValueRepo, iRegistryRepo)
	iAfterSalesRepo := repos.NewAfterSalesRepo(orm, iOrderRepo, iMemberRepo, iPaymentRepo)
	return iAfterSalesRepo
}

func GetWalletRepo() wallet.IWalletRepo {
	orm := provide.GetOrmInstance()
	db := provide.GetGOrm()
	iWalletRepo := repos.NewWalletRepo(orm, db)
	return iWalletRepo
}

func GetRegistryRepo() registry.IRegistryRepo {
	orm := provide.GetOrmInstance()
	storageInterface := provide.GetStorageInstance()
	iRegistryRepo := repos.NewRegistryRepo(orm, storageInterface)
	return iRegistryRepo
}

func GetJobRepo() job.IJobRepo {
	orm := provide.GetOrmInstance()
	storageInterface := provide.GetStorageInstance()
	iJobRepo := repos.NewJobRepository(orm, storageInterface)
	return iJobRepo
}

func GetStaffRepo() staff.IStaffRepo {
	db := provide.GetGOrm()
	iStaffRepo := repos.NewStaffRepo(db)
	return iStaffRepo
}

func GetPageRepo() content.IPageRepo {
	db := provide.GetGOrm()
	iPageRepo := repos.NewPageRepo(db)
	return iPageRepo
}

func GetInvoiceTenantRepo() invoice.IInvoiceRepo {
	db := provide.GetGOrm()
	iInvoiceRepo := repos.NewInvoiceTenantRepo(db)
	return iInvoiceRepo
}

func GetChatRepo() chat.IChatRepository {
	db := provide.GetGOrm()
	iChatRepository := repos.NewChatRepo(db)
	return iChatRepository
}

func GetWorkorderRepo() workorder.IWorkorderRepo {
	db := provide.GetGOrm()
	iWorkorderRepo := repos.NewWorkorderRepo(db)
	return iWorkorderRepo
}

func GetApprovalRepo() approval.IApprovalRepository {
	db := provide.GetGOrm()
	iApprovalRepository := repos.NewApprovalRepository(db)
	return iApprovalRepository
}

func GetRbacRepo() rbac.IRbacRepository {
	db := provide.GetGOrm()
	iRbacRepository := repos.NewRbacRepo(db)
	return iRbacRepository
}

func GetLogRepo() sys.IApplicationRepository {
	db := provide.GetGOrm()
	iApplicationRepository := repos.NewSysAppRepo(db)
	return iApplicationRepository
}

// Injectors from service.go:

// GetSPConfig 获取第三方服务自动配置
func GetSPConfig() *sp.ServiceProviderConfiguration {
	storageInterface := provide.GetStorageInstance()
	orm := provide.GetOrmInstance()
	iRegistryRepo := repos.NewRegistryRepo(orm, storageInterface)
	serviceProviderConfiguration := sp.NewSPConfig(storageInterface, iRegistryRepo)
	return serviceProviderConfiguration
}

func GetEventSource() *event.EventSource {
	orm := provide.GetOrmInstance()
	storageInterface := provide.GetStorageInstance()
	iRegistryRepo := repos.NewRegistryRepo(orm, storageInterface)
	db := provide.GetGOrm()
	iArticleCategoryRepo := repos.NewArticleCategoryRepo(db)
	iPageRepo := repos.NewPageRepo(db)
	iArticleRepo := repos.NewArticleRepo(orm, db, iArticleCategoryRepo, iPageRepo, iRegistryRepo)
	iNotifyRepo := repos.NewNotifyRepo(orm, db, iRegistryRepo)
	iValueRepo := repos.NewValueRepo(orm, storageInterface)
	iMessageRepo := repos.NewMssRepo(orm, iNotifyRepo, iRegistryRepo, iValueRepo)
	iPortalDao := impl.NewPortalDao(orm)
	iWholesaleRepo := repos.NewWholesaleRepo(orm)
	iProductModelRepo := repos.NewProModelRepo(orm)
	iCategoryRepo := repos.NewCategoryRepo(orm, iProductModelRepo, iRegistryRepo, storageInterface)
	iProductRepo := repos.NewProductRepo(orm, iProductModelRepo, iValueRepo)
	iItemWholesaleRepo := repos.NewItemWholesaleRepo(orm)
	iExpressRepo := repos.NewExpressRepo(orm, iValueRepo)
	iShopRepo := repos.NewShopRepo(orm, storageInterface, iValueRepo, iRegistryRepo)
	iItemRepo := repos.NewGoodsItemRepo(orm, iCategoryRepo, iProductRepo, iProductModelRepo, iItemWholesaleRepo, iExpressRepo, iRegistryRepo, iShopRepo)
	iUserRepo := repos.NewUserRepo(orm)
	iStaffRepo := repos.NewStaffRepo(db)
	iWalletRepo := repos.NewWalletRepo(orm, db)
	iSystemRepo := repos.NewSystemRepo(db, storageInterface)
	iMemberRepo := repos.NewMemberRepo(storageInterface, orm, db, iWalletRepo, iMessageRepo, iValueRepo, iRegistryRepo, iSystemRepo)
	iInvoiceRepo := repos.NewInvoiceTenantRepo(db)
	iApprovalRepository := repos.NewApprovalRepository(db)
	iRbacRepository := repos.NewRbacRepo(db)
	iMerchantRepo := repos.NewMerchantRepo(orm, db, storageInterface, iWholesaleRepo, iItemRepo, iShopRepo, iUserRepo, iStaffRepo, iMemberRepo, iSystemRepo, iMessageRepo, iWalletRepo, iValueRepo, iRegistryRepo, iInvoiceRepo, iApprovalRepository, iRbacRepository)
	eventHandler := handler.NewEventHandler(iRegistryRepo, iArticleRepo, iMessageRepo, iPageRepo, iPortalDao, iMerchantRepo, iApprovalRepository, iStaffRepo, iSystemRepo)
	iPaymentRepo := repos.NewPaymentRepo(storageInterface, orm, db, iMemberRepo, iMerchantRepo, iRegistryRepo)
	iCartRepo := repos.NewCartRepo(orm, iMemberRepo, iMerchantRepo, iItemRepo)
	iPromotionRepo := repos.NewPromotionRepo(orm, iItemRepo, iMemberRepo)
	iDeliveryRepo := repos.NewDeliverRepo(orm)
	iShipmentRepo := repos.NewShipmentRepo(orm, iExpressRepo)
	iOrderRepo := repos.NewOrderRepo(storageInterface, orm, iMerchantRepo, iPaymentRepo, iProductRepo, iCartRepo, iItemRepo, iPromotionRepo, iMemberRepo, iDeliveryRepo, iExpressRepo, iShipmentRepo, iShopRepo, iValueRepo, iRegistryRepo)
	paymentEventHandler := handler.NewPaymentEventHandler(iMemberRepo, iOrderRepo)
	merchantEventHandler := handler.NewMerchantEventHandler()
	invoiceEventHandler := handler.NewInvoiceEventHandler()
	eventSource := event.NewEventSource(eventHandler, paymentEventHandler, merchantEventHandler, invoiceEventHandler)
	return eventSource
}

// 状态服务
func GetStatusService() proto.StatusServiceServer {
	statusServiceServer := impl2.NewStatusService()
	return statusServiceServer
}

// 注册表服务
func GetRegistryService() proto.RegistryServiceServer {
	orm := provide.GetOrmInstance()
	storageInterface := provide.GetStorageInstance()
	iValueRepo := repos.NewValueRepo(orm, storageInterface)
	iRegistryRepo := repos.NewRegistryRepo(orm, storageInterface)
	registryServiceServer := impl2.NewRegistryService(iValueRepo, iRegistryRepo)
	return registryServiceServer
}

// 基础服务
func GetSystemService() proto.SystemServiceServer {
	orm := provide.GetOrmInstance()
	storageInterface := provide.GetStorageInstance()
	iValueRepo := repos.NewValueRepo(orm, storageInterface)
	iRegistryRepo := repos.NewRegistryRepo(orm, storageInterface)
	db := provide.GetGOrm()
	iSystemRepo := repos.NewSystemRepo(db, storageInterface)
	iNotifyRepo := repos.NewNotifyRepo(orm, db, iRegistryRepo)
	iMessageRepo := repos.NewMssRepo(orm, iNotifyRepo, iRegistryRepo, iValueRepo)
	iStationRepo := repos.NewStationRepo(db, iSystemRepo)
	systemServiceServer := impl2.NewSystemService(iValueRepo, iRegistryRepo, iSystemRepo, storageInterface, iMessageRepo, iStationRepo)
	return systemServiceServer
}

// 会员服务
func GetMemberService() proto.MemberServiceServer {
	storageInterface := provide.GetStorageInstance()
	orm := provide.GetOrmInstance()
	db := provide.GetGOrm()
	iWalletRepo := repos.NewWalletRepo(orm, db)
	iRegistryRepo := repos.NewRegistryRepo(orm, storageInterface)
	iNotifyRepo := repos.NewNotifyRepo(orm, db, iRegistryRepo)
	iValueRepo := repos.NewValueRepo(orm, storageInterface)
	iMessageRepo := repos.NewMssRepo(orm, iNotifyRepo, iRegistryRepo, iValueRepo)
	iSystemRepo := repos.NewSystemRepo(db, storageInterface)
	iMemberRepo := repos.NewMemberRepo(storageInterface, orm, db, iWalletRepo, iMessageRepo, iValueRepo, iRegistryRepo, iSystemRepo)
	iWholesaleRepo := repos.NewWholesaleRepo(orm)
	iProductModelRepo := repos.NewProModelRepo(orm)
	iCategoryRepo := repos.NewCategoryRepo(orm, iProductModelRepo, iRegistryRepo, storageInterface)
	iProductRepo := repos.NewProductRepo(orm, iProductModelRepo, iValueRepo)
	iItemWholesaleRepo := repos.NewItemWholesaleRepo(orm)
	iExpressRepo := repos.NewExpressRepo(orm, iValueRepo)
	iShopRepo := repos.NewShopRepo(orm, storageInterface, iValueRepo, iRegistryRepo)
	iItemRepo := repos.NewGoodsItemRepo(orm, iCategoryRepo, iProductRepo, iProductModelRepo, iItemWholesaleRepo, iExpressRepo, iRegistryRepo, iShopRepo)
	iUserRepo := repos.NewUserRepo(orm)
	iStaffRepo := repos.NewStaffRepo(db)
	iInvoiceRepo := repos.NewInvoiceTenantRepo(db)
	iApprovalRepository := repos.NewApprovalRepository(db)
	iRbacRepository := repos.NewRbacRepo(db)
	iMerchantRepo := repos.NewMerchantRepo(orm, db, storageInterface, iWholesaleRepo, iItemRepo, iShopRepo, iUserRepo, iStaffRepo, iMemberRepo, iSystemRepo, iMessageRepo, iWalletRepo, iValueRepo, iRegistryRepo, iInvoiceRepo, iApprovalRepository, iRbacRepository)
	memberQuery := query.NewMemberQuery(orm, db)
	orderQuery := query.NewOrderQuery(orm)
	iPaymentRepo := repos.NewPaymentRepo(storageInterface, orm, db, iMemberRepo, iMerchantRepo, iRegistryRepo)
	memberServiceServer := impl2.NewMemberService(iMemberRepo, iMerchantRepo, iRegistryRepo, memberQuery, orderQuery, iPaymentRepo, iValueRepo, iSystemRepo)
	return memberServiceServer
}

// 商户服务
func GetMerchantService() proto.MerchantServiceServer {
	orm := provide.GetOrmInstance()
	db := provide.GetGOrm()
	storageInterface := provide.GetStorageInstance()
	iWholesaleRepo := repos.NewWholesaleRepo(orm)
	iProductModelRepo := repos.NewProModelRepo(orm)
	iRegistryRepo := repos.NewRegistryRepo(orm, storageInterface)
	iCategoryRepo := repos.NewCategoryRepo(orm, iProductModelRepo, iRegistryRepo, storageInterface)
	iValueRepo := repos.NewValueRepo(orm, storageInterface)
	iProductRepo := repos.NewProductRepo(orm, iProductModelRepo, iValueRepo)
	iItemWholesaleRepo := repos.NewItemWholesaleRepo(orm)
	iExpressRepo := repos.NewExpressRepo(orm, iValueRepo)
	iShopRepo := repos.NewShopRepo(orm, storageInterface, iValueRepo, iRegistryRepo)
	iItemRepo := repos.NewGoodsItemRepo(orm, iCategoryRepo, iProductRepo, iProductModelRepo, iItemWholesaleRepo, iExpressRepo, iRegistryRepo, iShopRepo)
	iUserRepo := repos.NewUserRepo(orm)
	iStaffRepo := repos.NewStaffRepo(db)
	iWalletRepo := repos.NewWalletRepo(orm, db)
	iNotifyRepo := repos.NewNotifyRepo(orm, db, iRegistryRepo)
	iMessageRepo := repos.NewMssRepo(orm, iNotifyRepo, iRegistryRepo, iValueRepo)
	iSystemRepo := repos.NewSystemRepo(db, storageInterface)
	iMemberRepo := repos.NewMemberRepo(storageInterface, orm, db, iWalletRepo, iMessageRepo, iValueRepo, iRegistryRepo, iSystemRepo)
	iInvoiceRepo := repos.NewInvoiceTenantRepo(db)
	iApprovalRepository := repos.NewApprovalRepository(db)
	iRbacRepository := repos.NewRbacRepo(db)
	iMerchantRepo := repos.NewMerchantRepo(orm, db, storageInterface, iWholesaleRepo, iItemRepo, iShopRepo, iUserRepo, iStaffRepo, iMemberRepo, iSystemRepo, iMessageRepo, iWalletRepo, iValueRepo, iRegistryRepo, iInvoiceRepo, iApprovalRepository, iRbacRepository)
	app := provide.GetApp()
	merchantQuery := query.NewMerchantQuery(app, db, iStaffRepo, iApprovalRepository, iMerchantRepo, iWalletRepo)
	orderQuery := query.NewOrderQuery(orm)
	merchantServiceServer := impl2.NewMerchantService(iMerchantRepo, iMemberRepo, iStaffRepo, merchantQuery, orderQuery)
	return merchantServiceServer
}

// 商店服务
func GetShopService() proto.ShopServiceServer {
	orm := provide.GetOrmInstance()
	storageInterface := provide.GetStorageInstance()
	iValueRepo := repos.NewValueRepo(orm, storageInterface)
	iRegistryRepo := repos.NewRegistryRepo(orm, storageInterface)
	iShopRepo := repos.NewShopRepo(orm, storageInterface, iValueRepo, iRegistryRepo)
	db := provide.GetGOrm()
	iWholesaleRepo := repos.NewWholesaleRepo(orm)
	iProductModelRepo := repos.NewProModelRepo(orm)
	iCategoryRepo := repos.NewCategoryRepo(orm, iProductModelRepo, iRegistryRepo, storageInterface)
	iProductRepo := repos.NewProductRepo(orm, iProductModelRepo, iValueRepo)
	iItemWholesaleRepo := repos.NewItemWholesaleRepo(orm)
	iExpressRepo := repos.NewExpressRepo(orm, iValueRepo)
	iItemRepo := repos.NewGoodsItemRepo(orm, iCategoryRepo, iProductRepo, iProductModelRepo, iItemWholesaleRepo, iExpressRepo, iRegistryRepo, iShopRepo)
	iUserRepo := repos.NewUserRepo(orm)
	iStaffRepo := repos.NewStaffRepo(db)
	iWalletRepo := repos.NewWalletRepo(orm, db)
	iNotifyRepo := repos.NewNotifyRepo(orm, db, iRegistryRepo)
	iMessageRepo := repos.NewMssRepo(orm, iNotifyRepo, iRegistryRepo, iValueRepo)
	iSystemRepo := repos.NewSystemRepo(db, storageInterface)
	iMemberRepo := repos.NewMemberRepo(storageInterface, orm, db, iWalletRepo, iMessageRepo, iValueRepo, iRegistryRepo, iSystemRepo)
	iInvoiceRepo := repos.NewInvoiceTenantRepo(db)
	iApprovalRepository := repos.NewApprovalRepository(db)
	iRbacRepository := repos.NewRbacRepo(db)
	iMerchantRepo := repos.NewMerchantRepo(orm, db, storageInterface, iWholesaleRepo, iItemRepo, iShopRepo, iUserRepo, iStaffRepo, iMemberRepo, iSystemRepo, iMessageRepo, iWalletRepo, iValueRepo, iRegistryRepo, iInvoiceRepo, iApprovalRepository, iRbacRepository)
	shopQuery := query.NewShopQuery(orm, storageInterface)
	shopServiceServer := impl2.NewShopService(iShopRepo, iMerchantRepo, iRegistryRepo, shopQuery)
	return shopServiceServer
}

// 产品服务
func GetProductService() proto.ProductServiceServer {
	orm := provide.GetOrmInstance()
	iProductModelRepo := repos.NewProModelRepo(orm)
	storageInterface := provide.GetStorageInstance()
	iRegistryRepo := repos.NewRegistryRepo(orm, storageInterface)
	iCategoryRepo := repos.NewCategoryRepo(orm, iProductModelRepo, iRegistryRepo, storageInterface)
	iValueRepo := repos.NewValueRepo(orm, storageInterface)
	iProductRepo := repos.NewProductRepo(orm, iProductModelRepo, iValueRepo)
	productServiceServer := impl2.NewProductService(iProductModelRepo, iCategoryRepo, iProductRepo)
	return productServiceServer
}

// 商品服务
func GetItemService() proto.ItemServiceServer {
	storageInterface := provide.GetStorageInstance()
	orm := provide.GetOrmInstance()
	iProductModelRepo := repos.NewProModelRepo(orm)
	iRegistryRepo := repos.NewRegistryRepo(orm, storageInterface)
	iCategoryRepo := repos.NewCategoryRepo(orm, iProductModelRepo, iRegistryRepo, storageInterface)
	iValueRepo := repos.NewValueRepo(orm, storageInterface)
	iProductRepo := repos.NewProductRepo(orm, iProductModelRepo, iValueRepo)
	iItemWholesaleRepo := repos.NewItemWholesaleRepo(orm)
	iExpressRepo := repos.NewExpressRepo(orm, iValueRepo)
	iShopRepo := repos.NewShopRepo(orm, storageInterface, iValueRepo, iRegistryRepo)
	iItemRepo := repos.NewGoodsItemRepo(orm, iCategoryRepo, iProductRepo, iProductModelRepo, iItemWholesaleRepo, iExpressRepo, iRegistryRepo, iShopRepo)
	itemQuery := query.NewItemQuery(orm)
	iSaleLabelRepo := repos.NewTagSaleRepo(orm, iValueRepo)
	db := provide.GetGOrm()
	iWholesaleRepo := repos.NewWholesaleRepo(orm)
	iUserRepo := repos.NewUserRepo(orm)
	iStaffRepo := repos.NewStaffRepo(db)
	iWalletRepo := repos.NewWalletRepo(orm, db)
	iNotifyRepo := repos.NewNotifyRepo(orm, db, iRegistryRepo)
	iMessageRepo := repos.NewMssRepo(orm, iNotifyRepo, iRegistryRepo, iValueRepo)
	iSystemRepo := repos.NewSystemRepo(db, storageInterface)
	iMemberRepo := repos.NewMemberRepo(storageInterface, orm, db, iWalletRepo, iMessageRepo, iValueRepo, iRegistryRepo, iSystemRepo)
	iInvoiceRepo := repos.NewInvoiceTenantRepo(db)
	iApprovalRepository := repos.NewApprovalRepository(db)
	iRbacRepository := repos.NewRbacRepo(db)
	iMerchantRepo := repos.NewMerchantRepo(orm, db, storageInterface, iWholesaleRepo, iItemRepo, iShopRepo, iUserRepo, iStaffRepo, iMemberRepo, iSystemRepo, iMessageRepo, iWalletRepo, iValueRepo, iRegistryRepo, iInvoiceRepo, iApprovalRepository, iRbacRepository)
	itemServiceServer := impl2.NewItemService(storageInterface, iCategoryRepo, iItemRepo, itemQuery, iSaleLabelRepo, iProductModelRepo, iMerchantRepo, iValueRepo)
	return itemServiceServer
}

// 购物服务
func GetOrderService() proto.OrderServiceServer {
	storageInterface := provide.GetStorageInstance()
	orm := provide.GetOrmInstance()
	db := provide.GetGOrm()
	iWholesaleRepo := repos.NewWholesaleRepo(orm)
	iProductModelRepo := repos.NewProModelRepo(orm)
	iRegistryRepo := repos.NewRegistryRepo(orm, storageInterface)
	iCategoryRepo := repos.NewCategoryRepo(orm, iProductModelRepo, iRegistryRepo, storageInterface)
	iValueRepo := repos.NewValueRepo(orm, storageInterface)
	iProductRepo := repos.NewProductRepo(orm, iProductModelRepo, iValueRepo)
	iItemWholesaleRepo := repos.NewItemWholesaleRepo(orm)
	iExpressRepo := repos.NewExpressRepo(orm, iValueRepo)
	iShopRepo := repos.NewShopRepo(orm, storageInterface, iValueRepo, iRegistryRepo)
	iItemRepo := repos.NewGoodsItemRepo(orm, iCategoryRepo, iProductRepo, iProductModelRepo, iItemWholesaleRepo, iExpressRepo, iRegistryRepo, iShopRepo)
	iUserRepo := repos.NewUserRepo(orm)
	iStaffRepo := repos.NewStaffRepo(db)
	iWalletRepo := repos.NewWalletRepo(orm, db)
	iNotifyRepo := repos.NewNotifyRepo(orm, db, iRegistryRepo)
	iMessageRepo := repos.NewMssRepo(orm, iNotifyRepo, iRegistryRepo, iValueRepo)
	iSystemRepo := repos.NewSystemRepo(db, storageInterface)
	iMemberRepo := repos.NewMemberRepo(storageInterface, orm, db, iWalletRepo, iMessageRepo, iValueRepo, iRegistryRepo, iSystemRepo)
	iInvoiceRepo := repos.NewInvoiceTenantRepo(db)
	iApprovalRepository := repos.NewApprovalRepository(db)
	iRbacRepository := repos.NewRbacRepo(db)
	iMerchantRepo := repos.NewMerchantRepo(orm, db, storageInterface, iWholesaleRepo, iItemRepo, iShopRepo, iUserRepo, iStaffRepo, iMemberRepo, iSystemRepo, iMessageRepo, iWalletRepo, iValueRepo, iRegistryRepo, iInvoiceRepo, iApprovalRepository, iRbacRepository)
	iPaymentRepo := repos.NewPaymentRepo(storageInterface, orm, db, iMemberRepo, iMerchantRepo, iRegistryRepo)
	iCartRepo := repos.NewCartRepo(orm, iMemberRepo, iMerchantRepo, iItemRepo)
	iPromotionRepo := repos.NewPromotionRepo(orm, iItemRepo, iMemberRepo)
	iDeliveryRepo := repos.NewDeliverRepo(orm)
	iShipmentRepo := repos.NewShipmentRepo(orm, iExpressRepo)
	iOrderRepo := repos.NewOrderRepo(storageInterface, orm, iMerchantRepo, iPaymentRepo, iProductRepo, iCartRepo, iItemRepo, iPromotionRepo, iMemberRepo, iDeliveryRepo, iExpressRepo, iShipmentRepo, iShopRepo, iValueRepo, iRegistryRepo)
	orderQuery := query.NewOrderQuery(orm)
	orderServiceServer := impl2.NewShoppingService(iOrderRepo, iCartRepo, iMemberRepo, iProductRepo, iItemRepo, iMerchantRepo, iShopRepo, iPaymentRepo, iShipmentRepo, iExpressRepo, orderQuery)
	return orderServiceServer
}

// 购物车服务
func GetCartService() proto.CartServiceServer {
	orm := provide.GetOrmInstance()
	storageInterface := provide.GetStorageInstance()
	db := provide.GetGOrm()
	iWalletRepo := repos.NewWalletRepo(orm, db)
	iRegistryRepo := repos.NewRegistryRepo(orm, storageInterface)
	iNotifyRepo := repos.NewNotifyRepo(orm, db, iRegistryRepo)
	iValueRepo := repos.NewValueRepo(orm, storageInterface)
	iMessageRepo := repos.NewMssRepo(orm, iNotifyRepo, iRegistryRepo, iValueRepo)
	iSystemRepo := repos.NewSystemRepo(db, storageInterface)
	iMemberRepo := repos.NewMemberRepo(storageInterface, orm, db, iWalletRepo, iMessageRepo, iValueRepo, iRegistryRepo, iSystemRepo)
	iWholesaleRepo := repos.NewWholesaleRepo(orm)
	iProductModelRepo := repos.NewProModelRepo(orm)
	iCategoryRepo := repos.NewCategoryRepo(orm, iProductModelRepo, iRegistryRepo, storageInterface)
	iProductRepo := repos.NewProductRepo(orm, iProductModelRepo, iValueRepo)
	iItemWholesaleRepo := repos.NewItemWholesaleRepo(orm)
	iExpressRepo := repos.NewExpressRepo(orm, iValueRepo)
	iShopRepo := repos.NewShopRepo(orm, storageInterface, iValueRepo, iRegistryRepo)
	iItemRepo := repos.NewGoodsItemRepo(orm, iCategoryRepo, iProductRepo, iProductModelRepo, iItemWholesaleRepo, iExpressRepo, iRegistryRepo, iShopRepo)
	iUserRepo := repos.NewUserRepo(orm)
	iStaffRepo := repos.NewStaffRepo(db)
	iInvoiceRepo := repos.NewInvoiceTenantRepo(db)
	iApprovalRepository := repos.NewApprovalRepository(db)
	iRbacRepository := repos.NewRbacRepo(db)
	iMerchantRepo := repos.NewMerchantRepo(orm, db, storageInterface, iWholesaleRepo, iItemRepo, iShopRepo, iUserRepo, iStaffRepo, iMemberRepo, iSystemRepo, iMessageRepo, iWalletRepo, iValueRepo, iRegistryRepo, iInvoiceRepo, iApprovalRepository, iRbacRepository)
	iCartRepo := repos.NewCartRepo(orm, iMemberRepo, iMerchantRepo, iItemRepo)
	cartServiceServer := impl2.NewCartService(iCartRepo, iItemRepo, iMerchantRepo, iShopRepo)
	return cartServiceServer
}

// 售后服务
func GetAfterSalesService() proto.AfterSalesServiceServer {
	orm := provide.GetOrmInstance()
	storageInterface := provide.GetStorageInstance()
	db := provide.GetGOrm()
	iWholesaleRepo := repos.NewWholesaleRepo(orm)
	iProductModelRepo := repos.NewProModelRepo(orm)
	iRegistryRepo := repos.NewRegistryRepo(orm, storageInterface)
	iCategoryRepo := repos.NewCategoryRepo(orm, iProductModelRepo, iRegistryRepo, storageInterface)
	iValueRepo := repos.NewValueRepo(orm, storageInterface)
	iProductRepo := repos.NewProductRepo(orm, iProductModelRepo, iValueRepo)
	iItemWholesaleRepo := repos.NewItemWholesaleRepo(orm)
	iExpressRepo := repos.NewExpressRepo(orm, iValueRepo)
	iShopRepo := repos.NewShopRepo(orm, storageInterface, iValueRepo, iRegistryRepo)
	iItemRepo := repos.NewGoodsItemRepo(orm, iCategoryRepo, iProductRepo, iProductModelRepo, iItemWholesaleRepo, iExpressRepo, iRegistryRepo, iShopRepo)
	iUserRepo := repos.NewUserRepo(orm)
	iStaffRepo := repos.NewStaffRepo(db)
	iWalletRepo := repos.NewWalletRepo(orm, db)
	iNotifyRepo := repos.NewNotifyRepo(orm, db, iRegistryRepo)
	iMessageRepo := repos.NewMssRepo(orm, iNotifyRepo, iRegistryRepo, iValueRepo)
	iSystemRepo := repos.NewSystemRepo(db, storageInterface)
	iMemberRepo := repos.NewMemberRepo(storageInterface, orm, db, iWalletRepo, iMessageRepo, iValueRepo, iRegistryRepo, iSystemRepo)
	iInvoiceRepo := repos.NewInvoiceTenantRepo(db)
	iApprovalRepository := repos.NewApprovalRepository(db)
	iRbacRepository := repos.NewRbacRepo(db)
	iMerchantRepo := repos.NewMerchantRepo(orm, db, storageInterface, iWholesaleRepo, iItemRepo, iShopRepo, iUserRepo, iStaffRepo, iMemberRepo, iSystemRepo, iMessageRepo, iWalletRepo, iValueRepo, iRegistryRepo, iInvoiceRepo, iApprovalRepository, iRbacRepository)
	iPaymentRepo := repos.NewPaymentRepo(storageInterface, orm, db, iMemberRepo, iMerchantRepo, iRegistryRepo)
	iCartRepo := repos.NewCartRepo(orm, iMemberRepo, iMerchantRepo, iItemRepo)
	iPromotionRepo := repos.NewPromotionRepo(orm, iItemRepo, iMemberRepo)
	iDeliveryRepo := repos.NewDeliverRepo(orm)
	iShipmentRepo := repos.NewShipmentRepo(orm, iExpressRepo)
	iOrderRepo := repos.NewOrderRepo(storageInterface, orm, iMerchantRepo, iPaymentRepo, iProductRepo, iCartRepo, iItemRepo, iPromotionRepo, iMemberRepo, iDeliveryRepo, iExpressRepo, iShipmentRepo, iShopRepo, iValueRepo, iRegistryRepo)
	iAfterSalesRepo := repos.NewAfterSalesRepo(orm, iOrderRepo, iMemberRepo, iPaymentRepo)
	connector := provide.GetDb()
	afterSalesQuery := query.NewAfterSalesQuery(connector)
	afterSalesServiceServer := impl2.NewAfterSalesService(iAfterSalesRepo, afterSalesQuery, iOrderRepo)
	return afterSalesServiceServer
}

// 支付服务
func GetPaymentService() proto.PaymentServiceServer {
	storageInterface := provide.GetStorageInstance()
	orm := provide.GetOrmInstance()
	db := provide.GetGOrm()
	iWalletRepo := repos.NewWalletRepo(orm, db)
	iRegistryRepo := repos.NewRegistryRepo(orm, storageInterface)
	iNotifyRepo := repos.NewNotifyRepo(orm, db, iRegistryRepo)
	iValueRepo := repos.NewValueRepo(orm, storageInterface)
	iMessageRepo := repos.NewMssRepo(orm, iNotifyRepo, iRegistryRepo, iValueRepo)
	iSystemRepo := repos.NewSystemRepo(db, storageInterface)
	iMemberRepo := repos.NewMemberRepo(storageInterface, orm, db, iWalletRepo, iMessageRepo, iValueRepo, iRegistryRepo, iSystemRepo)
	iWholesaleRepo := repos.NewWholesaleRepo(orm)
	iProductModelRepo := repos.NewProModelRepo(orm)
	iCategoryRepo := repos.NewCategoryRepo(orm, iProductModelRepo, iRegistryRepo, storageInterface)
	iProductRepo := repos.NewProductRepo(orm, iProductModelRepo, iValueRepo)
	iItemWholesaleRepo := repos.NewItemWholesaleRepo(orm)
	iExpressRepo := repos.NewExpressRepo(orm, iValueRepo)
	iShopRepo := repos.NewShopRepo(orm, storageInterface, iValueRepo, iRegistryRepo)
	iItemRepo := repos.NewGoodsItemRepo(orm, iCategoryRepo, iProductRepo, iProductModelRepo, iItemWholesaleRepo, iExpressRepo, iRegistryRepo, iShopRepo)
	iUserRepo := repos.NewUserRepo(orm)
	iStaffRepo := repos.NewStaffRepo(db)
	iInvoiceRepo := repos.NewInvoiceTenantRepo(db)
	iApprovalRepository := repos.NewApprovalRepository(db)
	iRbacRepository := repos.NewRbacRepo(db)
	iMerchantRepo := repos.NewMerchantRepo(orm, db, storageInterface, iWholesaleRepo, iItemRepo, iShopRepo, iUserRepo, iStaffRepo, iMemberRepo, iSystemRepo, iMessageRepo, iWalletRepo, iValueRepo, iRegistryRepo, iInvoiceRepo, iApprovalRepository, iRbacRepository)
	iPaymentRepo := repos.NewPaymentRepo(storageInterface, orm, db, iMemberRepo, iMerchantRepo, iRegistryRepo)
	iCartRepo := repos.NewCartRepo(orm, iMemberRepo, iMerchantRepo, iItemRepo)
	iPromotionRepo := repos.NewPromotionRepo(orm, iItemRepo, iMemberRepo)
	iDeliveryRepo := repos.NewDeliverRepo(orm)
	iShipmentRepo := repos.NewShipmentRepo(orm, iExpressRepo)
	iOrderRepo := repos.NewOrderRepo(storageInterface, orm, iMerchantRepo, iPaymentRepo, iProductRepo, iCartRepo, iItemRepo, iPromotionRepo, iMemberRepo, iDeliveryRepo, iExpressRepo, iShipmentRepo, iShopRepo, iValueRepo, iRegistryRepo)
	paymentQuery := query.NewPaymentQuery(db)
	paymentServiceServer := impl2.NewPaymentService(iPaymentRepo, iOrderRepo, iMemberRepo, paymentQuery)
	return paymentServiceServer
}

// 快捷支付服务
func GetQuickPayService() proto.QuickPayServiceServer {
	storageInterface := provide.GetStorageInstance()
	orm := provide.GetOrmInstance()
	iRegistryRepo := repos.NewRegistryRepo(orm, storageInterface)
	quickPayServiceServer := impl2.NewQuickPayService(storageInterface, iRegistryRepo)
	return quickPayServiceServer
}

// 消息服务
func GetMessageService() proto.MessageServiceServer {
	orm := provide.GetOrmInstance()
	db := provide.GetGOrm()
	storageInterface := provide.GetStorageInstance()
	iRegistryRepo := repos.NewRegistryRepo(orm, storageInterface)
	iNotifyRepo := repos.NewNotifyRepo(orm, db, iRegistryRepo)
	iValueRepo := repos.NewValueRepo(orm, storageInterface)
	iMessageRepo := repos.NewMssRepo(orm, iNotifyRepo, iRegistryRepo, iValueRepo)
	messageServiceServer := impl2.NewMessageService(iMessageRepo)
	return messageServiceServer
}

// 快递服务
func GetExpressService() proto.ExpressServiceServer {
	orm := provide.GetOrmInstance()
	storageInterface := provide.GetStorageInstance()
	iValueRepo := repos.NewValueRepo(orm, storageInterface)
	iExpressRepo := repos.NewExpressRepo(orm, iValueRepo)
	expressServiceServer := impl2.NewExpressService(iExpressRepo)
	return expressServiceServer
}

// 配送服务
func GetShipmentService() proto.ShipmentServiceServer {
	orm := provide.GetOrmInstance()
	storageInterface := provide.GetStorageInstance()
	iValueRepo := repos.NewValueRepo(orm, storageInterface)
	iExpressRepo := repos.NewExpressRepo(orm, iValueRepo)
	iShipmentRepo := repos.NewShipmentRepo(orm, iExpressRepo)
	iDeliveryRepo := repos.NewDeliverRepo(orm)
	shipmentServiceServer := impl2.NewShipmentService(iShipmentRepo, iDeliveryRepo, iExpressRepo)
	return shipmentServiceServer
}

// 内容服务
func GetContentService() proto.ContentServiceServer {
	orm := provide.GetOrmInstance()
	db := provide.GetGOrm()
	iArticleCategoryRepo := repos.NewArticleCategoryRepo(db)
	iPageRepo := repos.NewPageRepo(db)
	storageInterface := provide.GetStorageInstance()
	iRegistryRepo := repos.NewRegistryRepo(orm, storageInterface)
	iArticleRepo := repos.NewArticleRepo(orm, db, iArticleCategoryRepo, iPageRepo, iRegistryRepo)
	app := provide.GetApp()
	iStaffRepo := repos.NewStaffRepo(db)
	iApprovalRepository := repos.NewApprovalRepository(db)
	iWholesaleRepo := repos.NewWholesaleRepo(orm)
	iProductModelRepo := repos.NewProModelRepo(orm)
	iCategoryRepo := repos.NewCategoryRepo(orm, iProductModelRepo, iRegistryRepo, storageInterface)
	iValueRepo := repos.NewValueRepo(orm, storageInterface)
	iProductRepo := repos.NewProductRepo(orm, iProductModelRepo, iValueRepo)
	iItemWholesaleRepo := repos.NewItemWholesaleRepo(orm)
	iExpressRepo := repos.NewExpressRepo(orm, iValueRepo)
	iShopRepo := repos.NewShopRepo(orm, storageInterface, iValueRepo, iRegistryRepo)
	iItemRepo := repos.NewGoodsItemRepo(orm, iCategoryRepo, iProductRepo, iProductModelRepo, iItemWholesaleRepo, iExpressRepo, iRegistryRepo, iShopRepo)
	iUserRepo := repos.NewUserRepo(orm)
	iWalletRepo := repos.NewWalletRepo(orm, db)
	iNotifyRepo := repos.NewNotifyRepo(orm, db, iRegistryRepo)
	iMessageRepo := repos.NewMssRepo(orm, iNotifyRepo, iRegistryRepo, iValueRepo)
	iSystemRepo := repos.NewSystemRepo(db, storageInterface)
	iMemberRepo := repos.NewMemberRepo(storageInterface, orm, db, iWalletRepo, iMessageRepo, iValueRepo, iRegistryRepo, iSystemRepo)
	iInvoiceRepo := repos.NewInvoiceTenantRepo(db)
	iRbacRepository := repos.NewRbacRepo(db)
	iMerchantRepo := repos.NewMerchantRepo(orm, db, storageInterface, iWholesaleRepo, iItemRepo, iShopRepo, iUserRepo, iStaffRepo, iMemberRepo, iSystemRepo, iMessageRepo, iWalletRepo, iValueRepo, iRegistryRepo, iInvoiceRepo, iApprovalRepository, iRbacRepository)
	merchantQuery := query.NewMerchantQuery(app, db, iStaffRepo, iApprovalRepository, iMerchantRepo, iWalletRepo)
	memberQuery := query.NewMemberQuery(orm, db)
	contentQuery := query.NewContentQuery(orm, db, merchantQuery, memberQuery, iMerchantRepo)
	contentServiceServer := impl2.NewContentService(iArticleRepo, contentQuery)
	return contentServiceServer
}

// 广告服务
func GetAdvertisementService() proto.AdvertisementServiceServer {
	orm := provide.GetOrmInstance()
	db := provide.GetGOrm()
	storageInterface := provide.GetStorageInstance()
	iAdRepo := repos.NewAdvertisementRepo(orm, db, storageInterface)
	advertisementServiceServer := impl2.NewAdvertisementService(iAdRepo, storageInterface)
	return advertisementServiceServer
}

// 钱包服务
func GetWalletService() proto.WalletServiceServer {
	orm := provide.GetOrmInstance()
	db := provide.GetGOrm()
	iWalletRepo := repos.NewWalletRepo(orm, db)
	walletServiceServer := impl2.NewWalletService(iWalletRepo)
	return walletServiceServer
}

// 个人金融服务
func GetPersonFinanceService() proto.FinanceServiceServer {
	orm := provide.GetOrmInstance()
	storageInterface := provide.GetStorageInstance()
	db := provide.GetGOrm()
	iWalletRepo := repos.NewWalletRepo(orm, db)
	iRegistryRepo := repos.NewRegistryRepo(orm, storageInterface)
	iNotifyRepo := repos.NewNotifyRepo(orm, db, iRegistryRepo)
	iValueRepo := repos.NewValueRepo(orm, storageInterface)
	iMessageRepo := repos.NewMssRepo(orm, iNotifyRepo, iRegistryRepo, iValueRepo)
	iSystemRepo := repos.NewSystemRepo(db, storageInterface)
	iMemberRepo := repos.NewMemberRepo(storageInterface, orm, db, iWalletRepo, iMessageRepo, iValueRepo, iRegistryRepo, iSystemRepo)
	iPersonFinanceRepository := repos.NewPersonFinanceRepository(orm, iMemberRepo)
	financeServiceServer := impl2.NewPersonFinanceService(iPersonFinanceRepository, iMemberRepo)
	return financeServiceServer
}

// 门户数据服务
func GetPortalService() proto.PortalServiceServer {
	orm := provide.GetOrmInstance()
	storageInterface := provide.GetStorageInstance()
	db := provide.GetGOrm()
	iAdRepo := repos.NewAdvertisementRepo(orm, db, storageInterface)
	iProductModelRepo := repos.NewProModelRepo(orm)
	iRegistryRepo := repos.NewRegistryRepo(orm, storageInterface)
	iCategoryRepo := repos.NewCategoryRepo(orm, iProductModelRepo, iRegistryRepo, storageInterface)
	commonDao := impl.NewCommDao(orm, storageInterface, iAdRepo, iCategoryRepo)
	iPortalDao := impl.NewPortalDao(orm)
	portalServiceServer := impl2.NewPortalService(orm, commonDao, iPortalDao)
	return portalServiceServer
}

// 查询服务
func GetQueryService() proto.QueryServiceServer {
	orm := provide.GetOrmInstance()
	db := provide.GetGOrm()
	storageInterface := provide.GetStorageInstance()
	iProductModelRepo := repos.NewProModelRepo(orm)
	iRegistryRepo := repos.NewRegistryRepo(orm, storageInterface)
	iCategoryRepo := repos.NewCategoryRepo(orm, iProductModelRepo, iRegistryRepo, storageInterface)
	memberQuery := query.NewMemberQuery(orm, db)
	queryServiceServer := impl2.NewQueryService(orm, db, storageInterface, iCategoryRepo, memberQuery)
	return queryServiceServer
}

// ExecuteService 执行任务服务
func GetExecuteService() proto.ExecutionServiceServer {
	storageInterface := provide.GetStorageInstance()
	orm := provide.GetOrmInstance()
	iJobRepo := repos.NewJobRepository(orm, storageInterface)
	executionServiceServer := impl2.NewExecutionService(storageInterface, iJobRepo)
	return executionServiceServer
}

// AppService APP服务
func GetAppService() proto.AppServiceServer {
	storageInterface := provide.GetStorageInstance()
	orm := provide.GetOrmInstance()
	db := provide.GetGOrm()
	iApplicationRepository := repos.NewSysAppRepo(db)
	iSystemRepo := repos.NewSystemRepo(db, storageInterface)
	appServiceServer := impl2.NewAppService(storageInterface, orm, iApplicationRepository, iSystemRepo)
	return appServiceServer
}

// RbacService 权限服务
func GetRbacService() proto.RbacServiceServer {
	storageInterface := provide.GetStorageInstance()
	orm := provide.GetOrmInstance()
	db := provide.GetGOrm()
	iRbacRepository := repos.NewRbacRepo(db)
	iRegistryRepo := repos.NewRegistryRepo(orm, storageInterface)
	rbacServiceServer := impl2.NewRbacService(storageInterface, orm, iRbacRepository, iRegistryRepo)
	return rbacServiceServer
}

// CodeService 条码服务
func GetCodeService() proto.CodeServiceServer {
	storageInterface := provide.GetStorageInstance()
	orm := provide.GetOrmInstance()
	codeServiceServer := impl2.NewCodeService(storageInterface, orm)
	return codeServiceServer
}

// NewCheckService 校验服务
func GetCheckService() proto.CheckServiceServer {
	storageInterface := provide.GetStorageInstance()
	orm := provide.GetOrmInstance()
	db := provide.GetGOrm()
	iWalletRepo := repos.NewWalletRepo(orm, db)
	iRegistryRepo := repos.NewRegistryRepo(orm, storageInterface)
	iNotifyRepo := repos.NewNotifyRepo(orm, db, iRegistryRepo)
	iValueRepo := repos.NewValueRepo(orm, storageInterface)
	iMessageRepo := repos.NewMssRepo(orm, iNotifyRepo, iRegistryRepo, iValueRepo)
	iSystemRepo := repos.NewSystemRepo(db, storageInterface)
	iMemberRepo := repos.NewMemberRepo(storageInterface, orm, db, iWalletRepo, iMessageRepo, iValueRepo, iRegistryRepo, iSystemRepo)
	iWholesaleRepo := repos.NewWholesaleRepo(orm)
	iProductModelRepo := repos.NewProModelRepo(orm)
	iCategoryRepo := repos.NewCategoryRepo(orm, iProductModelRepo, iRegistryRepo, storageInterface)
	iProductRepo := repos.NewProductRepo(orm, iProductModelRepo, iValueRepo)
	iItemWholesaleRepo := repos.NewItemWholesaleRepo(orm)
	iExpressRepo := repos.NewExpressRepo(orm, iValueRepo)
	iShopRepo := repos.NewShopRepo(orm, storageInterface, iValueRepo, iRegistryRepo)
	iItemRepo := repos.NewGoodsItemRepo(orm, iCategoryRepo, iProductRepo, iProductModelRepo, iItemWholesaleRepo, iExpressRepo, iRegistryRepo, iShopRepo)
	iUserRepo := repos.NewUserRepo(orm)
	iStaffRepo := repos.NewStaffRepo(db)
	iInvoiceRepo := repos.NewInvoiceTenantRepo(db)
	iApprovalRepository := repos.NewApprovalRepository(db)
	iRbacRepository := repos.NewRbacRepo(db)
	iMerchantRepo := repos.NewMerchantRepo(orm, db, storageInterface, iWholesaleRepo, iItemRepo, iShopRepo, iUserRepo, iStaffRepo, iMemberRepo, iSystemRepo, iMessageRepo, iWalletRepo, iValueRepo, iRegistryRepo, iInvoiceRepo, iApprovalRepository, iRbacRepository)
	checkServiceServer := impl2.NewCheckService(iMemberRepo, iMerchantRepo, iMessageRepo, iRegistryRepo, storageInterface)
	return checkServiceServer
}

func GetInvoiceService() proto.InvoiceServiceServer {
	db := provide.GetGOrm()
	iInvoiceRepo := repos.NewInvoiceTenantRepo(db)
	invoiceServiceServer := impl2.NewInvoiceService(iInvoiceRepo)
	return invoiceServiceServer
}

func GetChatService() proto.ChatServiceServer {
	db := provide.GetGOrm()
	iChatRepository := repos.NewChatRepo(db)
	storageInterface := provide.GetStorageInstance()
	orm := provide.GetOrmInstance()
	iWalletRepo := repos.NewWalletRepo(orm, db)
	iRegistryRepo := repos.NewRegistryRepo(orm, storageInterface)
	iNotifyRepo := repos.NewNotifyRepo(orm, db, iRegistryRepo)
	iValueRepo := repos.NewValueRepo(orm, storageInterface)
	iMessageRepo := repos.NewMssRepo(orm, iNotifyRepo, iRegistryRepo, iValueRepo)
	iSystemRepo := repos.NewSystemRepo(db, storageInterface)
	iMemberRepo := repos.NewMemberRepo(storageInterface, orm, db, iWalletRepo, iMessageRepo, iValueRepo, iRegistryRepo, iSystemRepo)
	chatServiceServer := impl2.NewChatService(iChatRepository, iMemberRepo)
	return chatServiceServer
}

func GetWorkorderService() proto.WorkorderServiceServer {
	db := provide.GetGOrm()
	iWorkorderRepo := repos.NewWorkorderRepo(db)
	workorderServiceServer := impl2.NewWorkorderService(iWorkorderRepo)
	return workorderServiceServer
}

func GetApprovalService() proto.ApprovalServiceServer {
	db := provide.GetGOrm()
	iApprovalRepository := repos.NewApprovalRepository(db)
	approvalServiceServer := impl2.NewApprovalService(iApprovalRepository)
	return approvalServiceServer
}

// ServiceProviderService 服务提供者服务
func GetProviderService() proto.ServiceProviderServiceServer {
	serviceProviderServiceServer := impl2.NewServiceProviderService()
	return serviceProviderServiceServer
}

// query.go:

var provideSets = wire.NewSet(provide.GetOrm, provide.GetGOrm, provide.GetOrmInstance, provide.GetStorageInstance, provide.GetApp, provide.GetDb, repos.NewSystemRepo, repos.NewRegistryRepo, repos.NewProModelRepo, repos.NewValueRepo, repos.NewUserRepo, repos.NewWalletRepo, repos.NewNotifyRepo, repos.NewMssRepo, repos.NewExpressRepo, repos.NewShipmentRepo, repos.NewMemberRepo, repos.NewProductRepo, repos.NewItemWholesaleRepo, repos.NewCategoryRepo, repos.NewShopRepo, repos.NewGoodsItemRepo, repos.NewAfterSalesRepo, repos.NewCartRepo, repos.NewArticleRepo, repos.NewMerchantRepo, repos.NewOrderRepo, repos.NewPaymentRepo, repos.NewPromotionRepo, repos.NewStationRepo, repos.NewTagSaleRepo, repos.NewWholesaleRepo, repos.NewPersonFinanceRepository, repos.NewDeliverRepo, repos.NewAdvertisementRepo, repos.NewJobRepository, repos.NewStaffRepo, repos.NewApprovalRepository, repos.NewPageRepo, repos.NewArticleCategoryRepo, repos.NewInvoiceTenantRepo, repos.NewChatRepo, repos.NewWorkorderRepo, repos.NewRbacRepo, repos.NewSysAppRepo)

var queryProvideSets = wire.NewSet(
	provideSets, query.NewStationQuery, query.NewMerchantQuery, query.NewOrderQuery, query.NewMemberQuery, query.NewShopQuery, query.NewItemQuery, query.NewAfterSalesQuery, query.NewContentQuery, query.NewWorkQuery, query.NewWalletQuery, query.NewInvoiceQuery, query.NewAdvertisementQuery, query.NewStatisticsQuery, query.NewPaymentQuery, query.NewSystemQuery,
)

var daoProvideSets = wire.NewSet(
	queryProvideSets, impl.NewCommDao, impl.NewPortalDao,
)

var InjectProvideSets = wire.NewSet(
	daoProvideSets, impl2.NewStatusService, impl2.NewRegistryService, impl2.NewMerchantService, impl2.NewPromotionService, impl2.NewSystemService, impl2.NewMemberService, impl2.NewShopService, impl2.NewProductService, impl2.NewItemService, impl2.NewShoppingService, impl2.NewCartService, impl2.NewAfterSalesService, impl2.NewAdvertisementService, impl2.NewPaymentService, impl2.NewQuickPayService, impl2.NewMessageService, impl2.NewExpressService, impl2.NewShipmentService, impl2.NewContentService, impl2.NewWalletService, impl2.NewCodeService, impl2.NewQueryService, impl2.NewRbacService, impl2.NewAppService, impl2.NewPortalService, impl2.NewPersonFinanceService, impl2.NewExecutionService, impl2.NewCheckService, impl2.NewInvoiceService, impl2.NewChatService, impl2.NewWorkorderService, impl2.NewApprovalService, impl2.NewServiceProviderService, event.NewEventSource, handler.NewEventHandler, handler.NewPaymentEventHandler, handler.NewMerchantEventHandler, handler.NewInvoiceEventHandler, sp.NewSPConfig,
)
